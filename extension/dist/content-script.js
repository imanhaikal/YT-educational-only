(()=>{var v=(e,o)=>()=>(e&&(o=e(e=0)),o);var h=(e,o)=>()=>(o||e((o={exports:{}}).exports,o),o.exports);var a,c=v(()=>{a=(e,o,i)=>{let t=document.createElement("div");t.className="hidden-video-placeholder",t.innerHTML=`
    <div class="message">Video hidden for your child.</div>
    <div class="tooltip">
      <span class="tooltip-icon">?</span>
      <span class="tooltip-text">Reason: ${o} (Confidence: ${i})</span>
    </div>
    <button class="reveal-button" role="button" tabindex="0" aria-label="Reveal hidden video">Reveal</button>
  `;let s=e.style.display;e.style.display="none",e.parentNode.insertBefore(t,e),t.querySelector(".reveal-button").addEventListener("click",()=>{e.style.display=s,t.remove()})}});var b=h(u=>{c();var p=e=>{let o=e.querySelector("a[href]");if(!o)return null;let i=o.getAttribute("href"),t=new URL(i,window.location.origin);return t.pathname==="/watch"?t.searchParams.get("v"):t.hostname==="youtu.be"?t.pathname.slice(1):null},f=(e,o)=>{let i;return(...t)=>{clearTimeout(i),i=setTimeout(()=>{e.apply(u,t)},o)}},m=["ytd-rich-item-renderer","ytd-video-renderer","ytd-grid-video-renderer","ytd-compact-video-renderer"],n=0,l=()=>{document.querySelectorAll(m.join(", ")).forEach(o=>{if(o.dataset.processed)return;o.dataset.processed=!0;let i=p(o);i&&(o.dataset.videoId=i,chrome.runtime.sendMessage({type:"CLASSIFY_VIDEO",videoId:i},t=>{if(chrome.runtime.lastError){console.error("Error sending message:",chrome.runtime.lastError.message);return}t&&t.status==="queued"&&console.log(`Video ${i} is queued for classification.`)}))})},y=new MutationObserver(f(l,300));y.observe(document.body,{childList:!0,subtree:!0});chrome.runtime.onMessage.addListener((e,o,i)=>{if(e.type==="get_hidden_video_count")i({count:n});else if(e.type==="CLASSIFICATION_RESULT"){let{classifications:t}=e;if(t){for(let s in t){let d=t[s];if(console.log(`Received classification for video ${s}:`,d),d.label!=="educational"){let r=document.querySelector(`[data-video-id="${s}"]`);r&&!r.dataset.hidden&&(console.log(`Hiding video ${s} classified as ${d.label}`),a(r),r.dataset.hidden=!0,n++)}}chrome.runtime.sendMessage({type:"hidden_video_count",count:n})}}});l()});b();})();
//# sourceMappingURL=data:application/json;base64,

(()=>{var v=(o,e)=>()=>(o&&(e=o(o=0)),e);var h=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports);var c,a=v(()=>{c=o=>{let e=document.createElement("div");e.className="hidden-video-placeholder",e.innerHTML=`
    <div class="message">Video hidden for your child.</div>
    <button class="reveal-button">Reveal</button>
  `;let i=o.style.display;o.style.display="none",o.parentNode.insertBefore(e,o),e.querySelector(".reveal-button").addEventListener("click",()=>{o.style.display=i,e.remove()})}});var g=h(u=>{a();var f=o=>{let e=o.querySelector("a[href]");if(!e)return null;let i=e.getAttribute("href"),t=new URL(i,window.location.origin);return t.pathname==="/watch"?t.searchParams.get("v"):t.hostname==="youtu.be"?t.pathname.slice(1):null},m=(o,e)=>{let i;return(...t)=>{clearTimeout(i),i=setTimeout(()=>{o.apply(u,t)},e)}},p=["ytd-rich-item-renderer","ytd-video-renderer","ytd-grid-video-renderer","ytd-compact-video-renderer"],n=0,l=()=>{document.querySelectorAll(p.join(", ")).forEach(e=>{if(e.dataset.processed)return;e.dataset.processed=!0;let i=f(e);i&&(e.dataset.videoId=i,chrome.runtime.sendMessage({type:"CLASSIFY_VIDEO",videoId:i},t=>{if(chrome.runtime.lastError){console.error("Error sending message:",chrome.runtime.lastError.message);return}t&&t.status==="queued"&&console.log(`Video ${i} is queued for classification.`)}))})},y=new MutationObserver(m(l,300));y.observe(document.body,{childList:!0,subtree:!0});chrome.runtime.onMessage.addListener((o,e,i)=>{if(o.type==="get_hidden_video_count")i({count:n});else if(o.type==="CLASSIFICATION_RESULT"){let{classifications:t}=o;if(t){for(let r in t){let s=t[r];if(console.log(`Received classification for video ${r}:`,s),s.label!=="educational"){let d=document.querySelector(`[data-video-id="${r}"]`);d&&!d.dataset.hidden&&(console.log(`Hiding video ${r} classified as ${s.label}`),c(d),d.dataset.hidden=!0,n++)}}chrome.runtime.sendMessage({type:"hidden_video_count",count:n})}}});l()});g();})();
//# sourceMappingURL=data:application/json;base64,

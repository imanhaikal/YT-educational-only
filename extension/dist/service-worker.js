(()=>{var u=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports);var y=u(()=>{var f="http://localhost:3000/v1/classify";async function r(o){let{auditLog:t=[]}=await new Promise(e=>chrome.storage.local.get("auditLog",e)),a=new Date().toISOString();t.unshift(`[${a}] ${o}`),t.length>50&&(t.length=50),await new Promise(e=>chrome.storage.local.set({auditLog:t},e))}chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.get("installationId",o=>{if(!o.installationId){let t=self.crypto.randomUUID();chrome.storage.local.set({installationId:t},()=>{console.log("Installation ID generated and stored:",t),r("Extension installed.")})}})});async function w(o){let{installationId:t,lastBackendFailTs:a}=await new Promise(e=>chrome.storage.local.get(["installationId","lastBackendFailTs"],e));if(a&&Date.now()-a<3e5){let e=`Backend is in backoff period. Skipping classification for ${o.length} videos.`;return console.log(e),r(e),null}try{let e=await fetch(f,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({videoIds:o,installationId:t})});if(!e.ok)throw new Error(`Backend request failed with status: ${e.status}`);await new Promise(s=>chrome.storage.local.remove("lastBackendFailTs",s));let c=await e.json(),n=`Successfully classified ${o.length} videos.`;return console.log(n),r(n),c.classifications}catch(e){console.error("Error classifying videos:",e);let c=`Failed to classify videos. Error: ${e.message}`;return r(c),await new Promise(n=>chrome.storage.local.set({lastBackendFailTs:Date.now()},n)),null}}chrome.alarms.onAlarm.addListener(async o=>{if(o.name==="process-video-queue"){let t=Array.from(m);if(m.clear(),t.length===0){r("Alarm triggered, but video queue was empty.");return}r(`Processing queue with ${t.length} videos.`);let a=await w(t);if(a){let e=await new Promise(s=>chrome.storage.local.get(null,s)),c=Object.keys(e).filter(s=>s.startsWith("video-classification-")),n={};for(let s in a){let i=a[s],d=`video-classification-${s}`;n[d]={classification:i,timestamp:Date.now()}}if(c.length+Object.keys(n).length>100){let s=c.map(l=>({key:l,timestamp:e[l].timestamp})).sort((l,h)=>l.timestamp-h.timestamp),i=Math.max(0,c.length+Object.keys(n).length-100),d=s.slice(0,i).map(l=>l.key);d.length>0&&(await new Promise(l=>chrome.storage.local.remove(d,l)),r(`Pruned ${d.length} old cache entries.`))}await new Promise(s=>chrome.storage.local.set(n,s)),r(`Cached ${Object.keys(n).length} new classifications.`),chrome.tabs.query({url:"*://www.youtube.com/*"},s=>{s.forEach(i=>{chrome.tabs.sendMessage(i.id,{type:"CLASSIFICATION_RESULT",classifications:a})})})}}});var m=new Set,g=10/60;chrome.runtime.onMessage.addListener((o,t,a)=>{if(o.type==="CLASSIFY_VIDEO"){let{videoId:e}=o,c=`video-classification-${e}`;return(async()=>{let s=(await new Promise(i=>chrome.storage.local.get(c,i)))[c];if(s&&Date.now()-s.timestamp<864e5){let i=`Returning cached classification for video ${e}: ${s.classification}`;console.log(i),r(i),a({classification:s.classification});return}console.log("No valid cache entry for videoId, adding to queue:",e),m.add(e),chrome.alarms.get("process-video-queue",i=>{i||(chrome.alarms.create("process-video-queue",{delayInMinutes:g}),r(`Alarm "process-video-queue" created with a ${g*60}s delay.`))}),a({status:"queued"})})(),!0}})});y();})();
//# sourceMappingURL=data:application/json;base64,

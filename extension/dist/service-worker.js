(()=>{var u=(s,t)=>()=>(t||s((t={exports:{}}).exports,t),t.exports);var y=u(()=>{var f="http://localhost:3000/v1/classify";async function l(s){let{auditLog:t=[]}=await new Promise(e=>chrome.storage.local.get("auditLog",e)),n=new Date().toISOString();t.unshift(`[${n}] ${s}`),t.length>50&&(t.length=50),await new Promise(e=>chrome.storage.local.set({auditLog:t},e))}chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.get("installationId",s=>{if(!s.installationId){let t=self.crypto.randomUUID();chrome.storage.local.set({installationId:t},()=>{console.log("Installation ID generated and stored:",t),l("Extension installed.")})}})});async function w(s){let{installationId:t,lastBackendFailTs:n}=await new Promise(e=>chrome.storage.local.get(["installationId","lastBackendFailTs"],e));if(n&&Date.now()-n<3e5){let e=`Backend is in backoff period. Skipping classification for ${s.length} videos.`;return console.log(e),l(e),null}try{let e=await fetch(f,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({videos:s,installationId:t})});if(!e.ok)throw new Error(`Backend request failed with status: ${e.status}`);await new Promise(o=>chrome.storage.local.remove("lastBackendFailTs",o));let r=await e.json(),i=`Successfully classified ${s.length} videos.`;return console.log(i),l(i),r.classifications}catch(e){console.error("Error classifying videos:",e);let r=`Failed to classify videos. Error: ${e.message}`;return l(r),await new Promise(i=>chrome.storage.local.set({lastBackendFailTs:Date.now()},i)),null}}chrome.alarms.onAlarm.addListener(async s=>{if(s.name==="process-video-queue"){let t=Array.from(m.values());if(m.clear(),t.length===0){l("Alarm triggered, but video queue was empty.");return}l(`Processing queue with ${t.length} videos.`);let n=await w(t);if(n){let e=await new Promise(o=>chrome.storage.local.get(null,o)),r=Object.keys(e).filter(o=>o.startsWith("video-classification-")),i={};for(let o in n){let c=n[o],a=`video-classification-${o}`;i[a]={classification:c,timestamp:Date.now()}}if(r.length+Object.keys(i).length>100){let o=r.map(d=>({key:d,timestamp:e[d].timestamp})).sort((d,h)=>d.timestamp-h.timestamp),c=Math.max(0,r.length+Object.keys(i).length-100),a=o.slice(0,c).map(d=>d.key);a.length>0&&(await new Promise(d=>chrome.storage.local.remove(a,d)),l(`Pruned ${a.length} old cache entries.`))}await new Promise(o=>chrome.storage.local.set(i,o)),l(`Cached ${Object.keys(i).length} new classifications.`),chrome.tabs.query({url:"*://www.youtube.com/*"},o=>{o.forEach(c=>{chrome.tabs.sendMessage(c.id,{type:"CLASSIFICATION_RESULT",classifications:n}).catch(a=>{a.message.includes("Receiving end does not exist")?console.log(`Content script in tab ${c.id} not ready to receive message.`):console.error(`Error sending message to tab ${c.id}:`,a)})})})}}});var m=new Map,g=10/60;chrome.runtime.onMessage.addListener((s,t,n)=>{if(s.type==="CLASSIFY_VIDEO"){let{videoId:e,metadata:r}=s,i=`video-classification-${e}`;return(async()=>{let c=(await new Promise(a=>chrome.storage.local.get(i,a)))[i];if(c&&Date.now()-c.timestamp<864e5){let a=`Returning cached classification for video ${e}: ${c.classification}`;console.log(a),l(a),n({classification:c.classification});return}console.log("No valid cache entry for videoId, adding to queue:",e),m.set(e,r),chrome.alarms.get("process-video-queue",a=>{a||(chrome.alarms.create("process-video-queue",{delayInMinutes:g}),l(`Alarm "process-video-queue" created with a ${g*60}s delay.`))}),n({status:"queued"})})(),!0}else s.type==="hidden_video_count"&&chrome.action.setBadgeText({text:s.count.toString()})})});y();})();
//# sourceMappingURL=data:application/json;base64,

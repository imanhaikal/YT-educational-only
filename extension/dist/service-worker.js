(()=>{var w=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports);var y=w(()=>{var u="http://localhost:3000/v1/classify";async function d(o){let{auditLog:t=[]}=await new Promise(e=>chrome.storage.local.get("auditLog",e)),i=new Date().toISOString();t.unshift(`[${i}] ${o}`),t.length>50&&(t.length=50),await new Promise(e=>chrome.storage.local.set({auditLog:t},e))}chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.get("installationId",o=>{if(!o.installationId){let t=self.crypto.randomUUID();chrome.storage.local.set({installationId:t},()=>{console.log("Installation ID generated and stored:",t),d("Extension installed.")})}})});async function I(o){let{installationId:t,lastBackendFailTs:i}=await new Promise(e=>chrome.storage.local.get(["installationId","lastBackendFailTs"],e));if(i&&Date.now()-i<3e5){let e=`Backend is in backoff period. Skipping classification for videoId: ${o}`;return console.log(e),d(e),null}try{let e=await fetch(u,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({videoId:o,installationId:t})});if(!e.ok)throw new Error(`Backend request failed with status: ${e.status}`);await new Promise(n=>chrome.storage.local.remove("lastBackendFailTs",n));let a=await e.json(),r=`Successfully classified video ${o} as ${a.classification}`;return console.log(r),d(r),a.classification}catch(e){console.error("Error classifying video:",e);let a=`Failed to classify video ${o}. Error: ${e.message}`;return d(a),await new Promise(r=>chrome.storage.local.set({lastBackendFailTs:Date.now()},r)),null}}chrome.runtime.onMessage.addListener((o,t,i)=>{if(o.type==="CLASSIFY_VIDEO"){let{videoId:e}=o,a=`video-classification-${e}`;return(async()=>{let n=(await new Promise(c=>chrome.storage.local.get(a,c)))[a];if(n&&Date.now()-n.timestamp<864e5){let c=`Returning cached classification for video ${e}: ${n.classification}`;console.log(c),d(c),i({classification:n.classification});return}console.log("No valid cache entry for videoId:",e);let f=await I(e);if(f){let c={classification:f,timestamp:Date.now()},m=await new Promise(s=>chrome.storage.local.get(null,s)),g=Object.keys(m).filter(s=>s.startsWith("video-classification-"));if(g.length>=100){let s=null,h=Date.now();for(let l of g)m[l]&&m[l].timestamp<h&&(h=m[l].timestamp,s=l);s&&(await new Promise(l=>chrome.storage.local.remove(s,l)),console.log("Pruned oldest cache entry:",s))}await new Promise(s=>chrome.storage.local.set({[a]:c},s)),console.log("Cached new classification for videoId:",e)}i({classification:f})})(),!0}})});y();})();
//# sourceMappingURL=data:application/json;base64,

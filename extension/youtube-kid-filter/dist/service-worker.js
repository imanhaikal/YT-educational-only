(()=>{var Ri=Object.create;var Os=Object.defineProperty;var Fi=Object.getOwnPropertyDescriptor;var Ii=Object.getOwnPropertyNames;var Ci=Object.getPrototypeOf,Li=Object.prototype.hasOwnProperty;var Ts=(_=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(_,{get:(o,D)=>(typeof require<"u"?require:o)[D]}):_)(function(_){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+_+'" is not supported')});var Ui=(_,o)=>()=>(o||_((o={exports:{}}).exports,o),o.exports);var Ei=(_,o,D,m)=>{if(o&&typeof o=="object"||typeof o=="function")for(let M of Ii(o))!Li.call(_,M)&&M!==D&&Os(_,M,{get:()=>o[M],enumerable:!(m=Fi(o,M))||m.enumerable});return _};var Ai=(_,o,D)=>(D=_!=null?Ri(Ci(_)):{},Ei(o||!_||!_.__esModule?Os(D,"default",{value:_,enumerable:!0}):D,_));var bs=Ui((xt,ge)=>{(function(_,o){typeof xt=="object"&&typeof ge<"u"?ge.exports=o():typeof define=="function"&&define.amd?define(o):_.moment=o()})(xt,function(){"use strict";var _;function o(){return _.apply(null,arguments)}function D(e){_=e}function m(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function M(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function f(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function p(e){if(Object.getOwnPropertyNames)return Object.getOwnPropertyNames(e).length===0;var t;for(t in e)if(f(e,t))return!1;return!0}function Y(e){return e===void 0}function O(e){return typeof e=="number"||Object.prototype.toString.call(e)==="[object Number]"}function F(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function xe(e,t){var s=[],r,a=e.length;for(r=0;r<a;++r)s.push(t(e[r],r));return s}function se(e,t){for(var s in t)f(t,s)&&(e[s]=t[s]);return f(t,"toString")&&(e.toString=t.toString),f(t,"valueOf")&&(e.valueOf=t.valueOf),e}function G(e,t,s,r){return rs(e,t,s,r,!0).utc()}function Rs(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function y(e){return e._pf==null&&(e._pf=Rs()),e._pf}var Qe;Array.prototype.some?Qe=Array.prototype.some:Qe=function(e){var t=Object(this),s=t.length>>>0,r;for(r=0;r<s;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};function Ke(e){var t=null,s=!1,r=e._d&&!isNaN(e._d.getTime());if(r&&(t=y(e),s=Qe.call(t.parsedDateParts,function(a){return a!=null}),r=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&s),e._strict&&(r=r&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===void 0)),Object.isFrozen==null||!Object.isFrozen(e))e._isValid=r;else return r;return e._isValid}function Pe(e){var t=G(NaN);return e!=null?se(y(t),e):y(t).userInvalidated=!0,t}var Nt=o.momentProperties=[],Xe=!1;function et(e,t){var s,r,a,n=Nt.length;if(Y(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),Y(t._i)||(e._i=t._i),Y(t._f)||(e._f=t._f),Y(t._l)||(e._l=t._l),Y(t._strict)||(e._strict=t._strict),Y(t._tzm)||(e._tzm=t._tzm),Y(t._isUTC)||(e._isUTC=t._isUTC),Y(t._offset)||(e._offset=t._offset),Y(t._pf)||(e._pf=y(t)),Y(t._locale)||(e._locale=t._locale),n>0)for(s=0;s<n;s++)r=Nt[s],a=t[r],Y(a)||(e[r]=a);return e}function ke(e){et(this,e),this._d=new Date(e._d!=null?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),Xe===!1&&(Xe=!0,o.updateOffset(this),Xe=!1)}function E(e){return e instanceof ke||e!=null&&e._isAMomentObject!=null}function Wt(e){o.suppressDeprecationWarnings===!1&&typeof console<"u"&&console.warn&&console.warn("Deprecation warning: "+e)}function C(e,t){var s=!0;return se(function(){if(o.deprecationHandler!=null&&o.deprecationHandler(null,e),s){var r=[],a,n,i,u=arguments.length;for(n=0;n<u;n++){if(a="",typeof arguments[n]=="object"){a+=`
[`+n+"] ";for(i in arguments[0])f(arguments[0],i)&&(a+=i+": "+arguments[0][i]+", ");a=a.slice(0,-2)}else a=arguments[n];r.push(a)}Wt(e+`
Arguments: `+Array.prototype.slice.call(r).join("")+`
`+new Error().stack),s=!1}return t.apply(this,arguments)},t)}var Rt={};function Ft(e,t){o.deprecationHandler!=null&&o.deprecationHandler(e,t),Rt[e]||(Wt(t),Rt[e]=!0)}o.suppressDeprecationWarnings=!1,o.deprecationHandler=null;function j(e){return typeof Function<"u"&&e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function Fs(e){var t,s;for(s in e)f(e,s)&&(t=e[s],j(t)?this[s]=t:this["_"+s]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function tt(e,t){var s=se({},e),r;for(r in t)f(t,r)&&(M(e[r])&&M(t[r])?(s[r]={},se(s[r],e[r]),se(s[r],t[r])):t[r]!=null?s[r]=t[r]:delete s[r]);for(r in e)f(e,r)&&!f(t,r)&&M(e[r])&&(s[r]=se({},s[r]));return s}function st(e){e!=null&&this.set(e)}var rt;Object.keys?rt=Object.keys:rt=function(e){var t,s=[];for(t in e)f(e,t)&&s.push(t);return s};var Is={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function Cs(e,t,s){var r=this._calendar[e]||this._calendar.sameElse;return j(r)?r.call(t,s):r}function $(e,t,s){var r=""+Math.abs(e),a=t-r.length,n=e>=0;return(n?s?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var at=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Ne=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,nt={},ue={};function h(e,t,s,r){var a=r;typeof r=="string"&&(a=function(){return this[r]()}),e&&(ue[e]=a),t&&(ue[t[0]]=function(){return $(a.apply(this,arguments),t[1],t[2])}),s&&(ue[s]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function Ls(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function Us(e){var t=e.match(at),s,r;for(s=0,r=t.length;s<r;s++)ue[t[s]]?t[s]=ue[t[s]]:t[s]=Ls(t[s]);return function(a){var n="",i;for(i=0;i<r;i++)n+=j(t[i])?t[i].call(a,e):t[i];return n}}function We(e,t){return e.isValid()?(t=It(t,e.localeData()),nt[t]=nt[t]||Us(t),nt[t](e)):e.localeData().invalidDate()}function It(e,t){var s=5;function r(a){return t.longDateFormat(a)||a}for(Ne.lastIndex=0;s>=0&&Ne.test(e);)e=e.replace(Ne,r),Ne.lastIndex=0,s-=1;return e}var Es={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function As(e){var t=this._longDateFormat[e],s=this._longDateFormat[e.toUpperCase()];return t||!s?t:(this._longDateFormat[e]=s.match(at).map(function(r){return r==="MMMM"||r==="MM"||r==="DD"||r==="dddd"?r.slice(1):r}).join(""),this._longDateFormat[e])}var Hs="Invalid date";function Vs(){return this._invalidDate}var Gs="%d",js=/\d{1,2}/;function $s(e){return this._ordinal.replace("%d",e)}var zs={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function Zs(e,t,s,r){var a=this._relativeTime[s];return j(a)?a(e,t,s,r):a.replace(/%d/i,e)}function qs(e,t){var s=this._relativeTime[e>0?"future":"past"];return j(s)?s(t):s.replace(/%s/i,t)}var Ct={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function L(e){return typeof e=="string"?Ct[e]||Ct[e.toLowerCase()]:void 0}function it(e){var t={},s,r;for(r in e)f(e,r)&&(s=L(r),s&&(t[s]=e[r]));return t}var Bs={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1};function Js(e){var t=[],s;for(s in e)f(e,s)&&t.push({unit:s,priority:Bs[s]});return t.sort(function(r,a){return r.priority-a.priority}),t}var Lt=/\d/,I=/\d\d/,Ut=/\d{3}/,ot=/\d{4}/,Re=/[+-]?\d{6}/,T=/\d\d?/,Et=/\d\d\d\d?/,At=/\d\d\d\d\d\d?/,Fe=/\d{1,3}/,lt=/\d{1,4}/,Ie=/[+-]?\d{1,6}/,de=/\d+/,Ce=/[+-]?\d+/,Qs=/Z|[+-]\d\d:?\d\d/gi,Le=/Z|[+-]\d\d(?::?\d\d)?/gi,Ks=/[+-]?\d+(\.\d{1,3})?/,Se=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,he=/^[1-9]\d?/,ut=/^([1-9]\d|\d)/,Ue;Ue={};function d(e,t,s){Ue[e]=j(t)?t:function(r,a){return r&&s?s:t}}function Xs(e,t){return f(Ue,e)?Ue[e](t._strict,t._locale):new RegExp(er(e))}function er(e){return Z(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,s,r,a,n){return s||r||a||n}))}function Z(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function U(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function w(e){var t=+e,s=0;return t!==0&&isFinite(t)&&(s=U(t)),s}var dt={};function v(e,t){var s,r=t,a;for(typeof e=="string"&&(e=[e]),O(t)&&(r=function(n,i){i[t]=w(n)}),a=e.length,s=0;s<a;s++)dt[e[s]]=r}function Me(e,t){v(e,function(s,r,a,n){a._w=a._w||{},t(s,a._w,a,n)})}function tr(e,t,s){t!=null&&f(dt,e)&&dt[e](t,s._a,s,e)}function Ee(e){return e%4===0&&e%100!==0||e%400===0}var W=0,q=1,z=2,N=3,A=4,B=5,ie=6,sr=7,rr=8;h("Y",0,0,function(){var e=this.year();return e<=9999?$(e,4):"+"+e}),h(0,["YY",2],0,function(){return this.year()%100}),h(0,["YYYY",4],0,"year"),h(0,["YYYYY",5],0,"year"),h(0,["YYYYYY",6,!0],0,"year"),d("Y",Ce),d("YY",T,I),d("YYYY",lt,ot),d("YYYYY",Ie,Re),d("YYYYYY",Ie,Re),v(["YYYYY","YYYYYY"],W),v("YYYY",function(e,t){t[W]=e.length===2?o.parseTwoDigitYear(e):w(e)}),v("YY",function(e,t){t[W]=o.parseTwoDigitYear(e)}),v("Y",function(e,t){t[W]=parseInt(e,10)});function De(e){return Ee(e)?366:365}o.parseTwoDigitYear=function(e){return w(e)+(w(e)>68?1900:2e3)};var Ht=fe("FullYear",!0);function ar(){return Ee(this.year())}function fe(e,t){return function(s){return s!=null?(Vt(this,e,s),o.updateOffset(this,t),this):ve(this,e)}}function ve(e,t){if(!e.isValid())return NaN;var s=e._d,r=e._isUTC;switch(t){case"Milliseconds":return r?s.getUTCMilliseconds():s.getMilliseconds();case"Seconds":return r?s.getUTCSeconds():s.getSeconds();case"Minutes":return r?s.getUTCMinutes():s.getMinutes();case"Hours":return r?s.getUTCHours():s.getHours();case"Date":return r?s.getUTCDate():s.getDate();case"Day":return r?s.getUTCDay():s.getDay();case"Month":return r?s.getUTCMonth():s.getMonth();case"FullYear":return r?s.getUTCFullYear():s.getFullYear();default:return NaN}}function Vt(e,t,s){var r,a,n,i,u;if(!(!e.isValid()||isNaN(s))){switch(r=e._d,a=e._isUTC,t){case"Milliseconds":return void(a?r.setUTCMilliseconds(s):r.setMilliseconds(s));case"Seconds":return void(a?r.setUTCSeconds(s):r.setSeconds(s));case"Minutes":return void(a?r.setUTCMinutes(s):r.setMinutes(s));case"Hours":return void(a?r.setUTCHours(s):r.setHours(s));case"Date":return void(a?r.setUTCDate(s):r.setDate(s));case"FullYear":break;default:return}n=s,i=e.month(),u=e.date(),u=u===29&&i===1&&!Ee(n)?28:u,a?r.setUTCFullYear(n,i,u):r.setFullYear(n,i,u)}}function nr(e){return e=L(e),j(this[e])?this[e]():this}function ir(e,t){if(typeof e=="object"){e=it(e);var s=Js(e),r,a=s.length;for(r=0;r<a;r++)this[s[r].unit](e[s[r].unit])}else if(e=L(e),j(this[e]))return this[e](t);return this}function or(e,t){return(e%t+t)%t}var P;Array.prototype.indexOf?P=Array.prototype.indexOf:P=function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};function ht(e,t){if(isNaN(e)||isNaN(t))return NaN;var s=or(t,12);return e+=(t-s)/12,s===1?Ee(e)?29:28:31-s%7%2}h("M",["MM",2],"Mo",function(){return this.month()+1}),h("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),h("MMMM",0,0,function(e){return this.localeData().months(this,e)}),d("M",T,he),d("MM",T,I),d("MMM",function(e,t){return t.monthsShortRegex(e)}),d("MMMM",function(e,t){return t.monthsRegex(e)}),v(["M","MM"],function(e,t){t[q]=w(e)-1}),v(["MMM","MMMM"],function(e,t,s,r){var a=s._locale.monthsParse(e,r,s._strict);a!=null?t[q]=a:y(s).invalidMonth=e});var lr="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Gt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),jt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ur=Se,dr=Se;function hr(e,t){return e?m(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||jt).test(t)?"format":"standalone"][e.month()]:m(this._months)?this._months:this._months.standalone}function fr(e,t){return e?m(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[jt.test(t)?"format":"standalone"][e.month()]:m(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function cr(e,t,s){var r,a,n,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)n=G([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(n,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(n,"").toLocaleLowerCase();return s?t==="MMM"?(a=P.call(this._shortMonthsParse,i),a!==-1?a:null):(a=P.call(this._longMonthsParse,i),a!==-1?a:null):t==="MMM"?(a=P.call(this._shortMonthsParse,i),a!==-1?a:(a=P.call(this._longMonthsParse,i),a!==-1?a:null)):(a=P.call(this._longMonthsParse,i),a!==-1?a:(a=P.call(this._shortMonthsParse,i),a!==-1?a:null))}function mr(e,t,s){var r,a,n;if(this._monthsParseExact)return cr.call(this,e,t,s);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=G([2e3,r]),s&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),!s&&!this._monthsParse[r]&&(n="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(n.replace(".",""),"i")),s&&t==="MMMM"&&this._longMonthsParse[r].test(e))return r;if(s&&t==="MMM"&&this._shortMonthsParse[r].test(e))return r;if(!s&&this._monthsParse[r].test(e))return r}}function $t(e,t){if(!e.isValid())return e;if(typeof t=="string"){if(/^\d+$/.test(t))t=w(t);else if(t=e.localeData().monthsParse(t),!O(t))return e}var s=t,r=e.date();return r=r<29?r:Math.min(r,ht(e.year(),s)),e._isUTC?e._d.setUTCMonth(s,r):e._d.setMonth(s,r),e}function zt(e){return e!=null?($t(this,e),o.updateOffset(this,!0),this):ve(this,"Month")}function _r(){return ht(this.year(),this.month())}function yr(e){return this._monthsParseExact?(f(this,"_monthsRegex")||Zt.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(f(this,"_monthsShortRegex")||(this._monthsShortRegex=ur),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function wr(e){return this._monthsParseExact?(f(this,"_monthsRegex")||Zt.call(this),e?this._monthsStrictRegex:this._monthsRegex):(f(this,"_monthsRegex")||(this._monthsRegex=dr),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function Zt(){function e(c,g){return g.length-c.length}var t=[],s=[],r=[],a,n,i,u;for(a=0;a<12;a++)n=G([2e3,a]),i=Z(this.monthsShort(n,"")),u=Z(this.months(n,"")),t.push(i),s.push(u),r.push(u),r.push(i);t.sort(e),s.sort(e),r.sort(e),this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function gr(e,t,s,r,a,n,i){var u;return e<100&&e>=0?(u=new Date(e+400,t,s,r,a,n,i),isFinite(u.getFullYear())&&u.setFullYear(e)):u=new Date(e,t,s,r,a,n,i),u}function pe(e){var t,s;return e<100&&e>=0?(s=Array.prototype.slice.call(arguments),s[0]=e+400,t=new Date(Date.UTC.apply(null,s)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ae(e,t,s){var r=7+t-s,a=(7+pe(e,0,r).getUTCDay()-t)%7;return-a+r-1}function qt(e,t,s,r,a){var n=(7+s-r)%7,i=Ae(e,r,a),u=1+7*(t-1)+n+i,c,g;return u<=0?(c=e-1,g=De(c)+u):u>De(e)?(c=e+1,g=u-De(e)):(c=e,g=u),{year:c,dayOfYear:g}}function Ye(e,t,s){var r=Ae(e.year(),t,s),a=Math.floor((e.dayOfYear()-r-1)/7)+1,n,i;return a<1?(i=e.year()-1,n=a+J(i,t,s)):a>J(e.year(),t,s)?(n=a-J(e.year(),t,s),i=e.year()+1):(i=e.year(),n=a),{week:n,year:i}}function J(e,t,s){var r=Ae(e,t,s),a=Ae(e+1,t,s);return(De(e)-r+a)/7}h("w",["ww",2],"wo","week"),h("W",["WW",2],"Wo","isoWeek"),d("w",T,he),d("ww",T,I),d("W",T,he),d("WW",T,I),Me(["w","ww","W","WW"],function(e,t,s,r){t[r.substr(0,1)]=w(e)});function kr(e){return Ye(e,this._week.dow,this._week.doy).week}var Sr={dow:0,doy:6};function Mr(){return this._week.dow}function Dr(){return this._week.doy}function vr(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function pr(e){var t=Ye(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}h("d",0,"do","day"),h("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),h("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),h("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),h("e",0,0,"weekday"),h("E",0,0,"isoWeekday"),d("d",T),d("e",T),d("E",T),d("dd",function(e,t){return t.weekdaysMinRegex(e)}),d("ddd",function(e,t){return t.weekdaysShortRegex(e)}),d("dddd",function(e,t){return t.weekdaysRegex(e)}),Me(["dd","ddd","dddd"],function(e,t,s,r){var a=s._locale.weekdaysParse(e,r,s._strict);a!=null?t.d=a:y(s).invalidWeekday=e}),Me(["d","e","E"],function(e,t,s,r){t[r]=w(e)});function Yr(e,t){return typeof e!="string"?e:isNaN(e)?(e=t.weekdaysParse(e),typeof e=="number"?e:null):parseInt(e,10)}function Or(e,t){return typeof e=="string"?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function ft(e,t){return e.slice(t,7).concat(e.slice(0,t))}var Tr="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Bt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),br="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),xr=Se,Pr=Se,Nr=Se;function Wr(e,t){var s=m(this._weekdays)?this._weekdays:this._weekdays[e&&e!==!0&&this._weekdays.isFormat.test(t)?"format":"standalone"];return e===!0?ft(s,this._week.dow):e?s[e.day()]:s}function Rr(e){return e===!0?ft(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Fr(e){return e===!0?ft(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Ir(e,t,s){var r,a,n,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)n=G([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(n,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(n,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(n,"").toLocaleLowerCase();return s?t==="dddd"?(a=P.call(this._weekdaysParse,i),a!==-1?a:null):t==="ddd"?(a=P.call(this._shortWeekdaysParse,i),a!==-1?a:null):(a=P.call(this._minWeekdaysParse,i),a!==-1?a:null):t==="dddd"?(a=P.call(this._weekdaysParse,i),a!==-1||(a=P.call(this._shortWeekdaysParse,i),a!==-1)?a:(a=P.call(this._minWeekdaysParse,i),a!==-1?a:null)):t==="ddd"?(a=P.call(this._shortWeekdaysParse,i),a!==-1||(a=P.call(this._weekdaysParse,i),a!==-1)?a:(a=P.call(this._minWeekdaysParse,i),a!==-1?a:null)):(a=P.call(this._minWeekdaysParse,i),a!==-1||(a=P.call(this._weekdaysParse,i),a!==-1)?a:(a=P.call(this._shortWeekdaysParse,i),a!==-1?a:null))}function Cr(e,t,s){var r,a,n;if(this._weekdaysParseExact)return Ir.call(this,e,t,s);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=G([2e3,1]).day(r),s&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(n="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(n.replace(".",""),"i")),s&&t==="dddd"&&this._fullWeekdaysParse[r].test(e))return r;if(s&&t==="ddd"&&this._shortWeekdaysParse[r].test(e))return r;if(s&&t==="dd"&&this._minWeekdaysParse[r].test(e))return r;if(!s&&this._weekdaysParse[r].test(e))return r}}function Lr(e){if(!this.isValid())return e!=null?this:NaN;var t=ve(this,"Day");return e!=null?(e=Yr(e,this.localeData()),this.add(e-t,"d")):t}function Ur(e){if(!this.isValid())return e!=null?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function Er(e){if(!this.isValid())return e!=null?this:NaN;if(e!=null){var t=Or(e,this.localeData());return this.day(this.day()%7?t:t-7)}else return this.day()||7}function Ar(e){return this._weekdaysParseExact?(f(this,"_weekdaysRegex")||ct.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(f(this,"_weekdaysRegex")||(this._weekdaysRegex=xr),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function Hr(e){return this._weekdaysParseExact?(f(this,"_weekdaysRegex")||ct.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(f(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Pr),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Vr(e){return this._weekdaysParseExact?(f(this,"_weekdaysRegex")||ct.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(f(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Nr),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function ct(){function e(R,te){return te.length-R.length}var t=[],s=[],r=[],a=[],n,i,u,c,g;for(n=0;n<7;n++)i=G([2e3,1]).day(n),u=Z(this.weekdaysMin(i,"")),c=Z(this.weekdaysShort(i,"")),g=Z(this.weekdays(i,"")),t.push(u),s.push(c),r.push(g),a.push(u),a.push(c),a.push(g);t.sort(e),s.sort(e),r.sort(e),a.sort(e),this._weekdaysRegex=new RegExp("^("+a.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function mt(){return this.hours()%12||12}function Gr(){return this.hours()||24}h("H",["HH",2],0,"hour"),h("h",["hh",2],0,mt),h("k",["kk",2],0,Gr),h("hmm",0,0,function(){return""+mt.apply(this)+$(this.minutes(),2)}),h("hmmss",0,0,function(){return""+mt.apply(this)+$(this.minutes(),2)+$(this.seconds(),2)}),h("Hmm",0,0,function(){return""+this.hours()+$(this.minutes(),2)}),h("Hmmss",0,0,function(){return""+this.hours()+$(this.minutes(),2)+$(this.seconds(),2)});function Jt(e,t){h(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}Jt("a",!0),Jt("A",!1);function Qt(e,t){return t._meridiemParse}d("a",Qt),d("A",Qt),d("H",T,ut),d("h",T,he),d("k",T,he),d("HH",T,I),d("hh",T,I),d("kk",T,I),d("hmm",Et),d("hmmss",At),d("Hmm",Et),d("Hmmss",At),v(["H","HH"],N),v(["k","kk"],function(e,t,s){var r=w(e);t[N]=r===24?0:r}),v(["a","A"],function(e,t,s){s._isPm=s._locale.isPM(e),s._meridiem=e}),v(["h","hh"],function(e,t,s){t[N]=w(e),y(s).bigHour=!0}),v("hmm",function(e,t,s){var r=e.length-2;t[N]=w(e.substr(0,r)),t[A]=w(e.substr(r)),y(s).bigHour=!0}),v("hmmss",function(e,t,s){var r=e.length-4,a=e.length-2;t[N]=w(e.substr(0,r)),t[A]=w(e.substr(r,2)),t[B]=w(e.substr(a)),y(s).bigHour=!0}),v("Hmm",function(e,t,s){var r=e.length-2;t[N]=w(e.substr(0,r)),t[A]=w(e.substr(r))}),v("Hmmss",function(e,t,s){var r=e.length-4,a=e.length-2;t[N]=w(e.substr(0,r)),t[A]=w(e.substr(r,2)),t[B]=w(e.substr(a))});function jr(e){return(e+"").toLowerCase().charAt(0)==="p"}var $r=/[ap]\.?m?\.?/i,zr=fe("Hours",!0);function Zr(e,t,s){return e>11?s?"pm":"PM":s?"am":"AM"}var Kt={calendar:Is,longDateFormat:Es,invalidDate:Hs,ordinal:Gs,dayOfMonthOrdinalParse:js,relativeTime:zs,months:lr,monthsShort:Gt,week:Sr,weekdays:Tr,weekdaysMin:br,weekdaysShort:Bt,meridiemParse:$r},x={},Oe={},Te;function qr(e,t){var s,r=Math.min(e.length,t.length);for(s=0;s<r;s+=1)if(e[s]!==t[s])return s;return r}function Xt(e){return e&&e.toLowerCase().replace("_","-")}function Br(e){for(var t=0,s,r,a,n;t<e.length;){for(n=Xt(e[t]).split("-"),s=n.length,r=Xt(e[t+1]),r=r?r.split("-"):null;s>0;){if(a=He(n.slice(0,s).join("-")),a)return a;if(r&&r.length>=s&&qr(n,r)>=s-1)break;s--}t++}return Te}function Jr(e){return!!(e&&e.match("^[^/\\\\]*$"))}function He(e){var t=null,s;if(x[e]===void 0&&typeof ge<"u"&&ge&&ge.exports&&Jr(e))try{t=Te._abbr,s=Ts,s("./locale/"+e),re(t)}catch{x[e]=null}return x[e]}function re(e,t){var s;return e&&(Y(t)?s=Q(e):s=_t(e,t),s?Te=s:typeof console<"u"&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Te._abbr}function _t(e,t){if(t!==null){var s,r=Kt;if(t.abbr=e,x[e]!=null)Ft("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=x[e]._config;else if(t.parentLocale!=null)if(x[t.parentLocale]!=null)r=x[t.parentLocale]._config;else if(s=He(t.parentLocale),s!=null)r=s._config;else return Oe[t.parentLocale]||(Oe[t.parentLocale]=[]),Oe[t.parentLocale].push({name:e,config:t}),null;return x[e]=new st(tt(r,t)),Oe[e]&&Oe[e].forEach(function(a){_t(a.name,a.config)}),re(e),x[e]}else return delete x[e],null}function Qr(e,t){if(t!=null){var s,r,a=Kt;x[e]!=null&&x[e].parentLocale!=null?x[e].set(tt(x[e]._config,t)):(r=He(e),r!=null&&(a=r._config),t=tt(a,t),r==null&&(t.abbr=e),s=new st(t),s.parentLocale=x[e],x[e]=s),re(e)}else x[e]!=null&&(x[e].parentLocale!=null?(x[e]=x[e].parentLocale,e===re()&&re(e)):x[e]!=null&&delete x[e]);return x[e]}function Q(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Te;if(!m(e)){if(t=He(e),t)return t;e=[e]}return Br(e)}function Kr(){return rt(x)}function yt(e){var t,s=e._a;return s&&y(e).overflow===-2&&(t=s[q]<0||s[q]>11?q:s[z]<1||s[z]>ht(s[W],s[q])?z:s[N]<0||s[N]>24||s[N]===24&&(s[A]!==0||s[B]!==0||s[ie]!==0)?N:s[A]<0||s[A]>59?A:s[B]<0||s[B]>59?B:s[ie]<0||s[ie]>999?ie:-1,y(e)._overflowDayOfYear&&(t<W||t>z)&&(t=z),y(e)._overflowWeeks&&t===-1&&(t=sr),y(e)._overflowWeekday&&t===-1&&(t=rr),y(e).overflow=t),e}var Xr=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ea=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ta=/Z|[+-]\d\d(?::?\d\d)?/,Ve=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],wt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],sa=/^\/?Date\((-?\d+)/i,ra=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,aa={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function es(e){var t,s,r=e._i,a=Xr.exec(r)||ea.exec(r),n,i,u,c,g=Ve.length,R=wt.length;if(a){for(y(e).iso=!0,t=0,s=g;t<s;t++)if(Ve[t][1].exec(a[1])){i=Ve[t][0],n=Ve[t][2]!==!1;break}if(i==null){e._isValid=!1;return}if(a[3]){for(t=0,s=R;t<s;t++)if(wt[t][1].exec(a[3])){u=(a[2]||" ")+wt[t][0];break}if(u==null){e._isValid=!1;return}}if(!n&&u!=null){e._isValid=!1;return}if(a[4])if(ta.exec(a[4]))c="Z";else{e._isValid=!1;return}e._f=i+(u||"")+(c||""),kt(e)}else e._isValid=!1}function na(e,t,s,r,a,n){var i=[ia(e),Gt.indexOf(t),parseInt(s,10),parseInt(r,10),parseInt(a,10)];return n&&i.push(parseInt(n,10)),i}function ia(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function oa(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}function la(e,t,s){if(e){var r=Bt.indexOf(e),a=new Date(t[0],t[1],t[2]).getDay();if(r!==a)return y(s).weekdayMismatch=!0,s._isValid=!1,!1}return!0}function ua(e,t,s){if(e)return aa[e];if(t)return 0;var r=parseInt(s,10),a=r%100,n=(r-a)/100;return n*60+a}function ts(e){var t=ra.exec(oa(e._i)),s;if(t){if(s=na(t[4],t[3],t[2],t[5],t[6],t[7]),!la(t[1],s,e))return;e._a=s,e._tzm=ua(t[8],t[9],t[10]),e._d=pe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),y(e).rfc2822=!0}else e._isValid=!1}function da(e){var t=sa.exec(e._i);if(t!==null){e._d=new Date(+t[1]);return}if(es(e),e._isValid===!1)delete e._isValid;else return;if(ts(e),e._isValid===!1)delete e._isValid;else return;e._strict?e._isValid=!1:o.createFromInputFallback(e)}o.createFromInputFallback=C("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))});function ce(e,t,s){return e??t??s}function ha(e){var t=new Date(o.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}function gt(e){var t,s,r=[],a,n,i;if(!e._d){for(a=ha(e),e._w&&e._a[z]==null&&e._a[q]==null&&fa(e),e._dayOfYear!=null&&(i=ce(e._a[W],a[W]),(e._dayOfYear>De(i)||e._dayOfYear===0)&&(y(e)._overflowDayOfYear=!0),s=pe(i,0,e._dayOfYear),e._a[q]=s.getUTCMonth(),e._a[z]=s.getUTCDate()),t=0;t<3&&e._a[t]==null;++t)e._a[t]=r[t]=a[t];for(;t<7;t++)e._a[t]=r[t]=e._a[t]==null?t===2?1:0:e._a[t];e._a[N]===24&&e._a[A]===0&&e._a[B]===0&&e._a[ie]===0&&(e._nextDay=!0,e._a[N]=0),e._d=(e._useUTC?pe:gr).apply(null,r),n=e._useUTC?e._d.getUTCDay():e._d.getDay(),e._tzm!=null&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[N]=24),e._w&&typeof e._w.d<"u"&&e._w.d!==n&&(y(e).weekdayMismatch=!0)}}function fa(e){var t,s,r,a,n,i,u,c,g;t=e._w,t.GG!=null||t.W!=null||t.E!=null?(n=1,i=4,s=ce(t.GG,e._a[W],Ye(b(),1,4).year),r=ce(t.W,1),a=ce(t.E,1),(a<1||a>7)&&(c=!0)):(n=e._locale._week.dow,i=e._locale._week.doy,g=Ye(b(),n,i),s=ce(t.gg,e._a[W],g.year),r=ce(t.w,g.week),t.d!=null?(a=t.d,(a<0||a>6)&&(c=!0)):t.e!=null?(a=t.e+n,(t.e<0||t.e>6)&&(c=!0)):a=n),r<1||r>J(s,n,i)?y(e)._overflowWeeks=!0:c!=null?y(e)._overflowWeekday=!0:(u=qt(s,r,a,n,i),e._a[W]=u.year,e._dayOfYear=u.dayOfYear)}o.ISO_8601=function(){},o.RFC_2822=function(){};function kt(e){if(e._f===o.ISO_8601){es(e);return}if(e._f===o.RFC_2822){ts(e);return}e._a=[],y(e).empty=!0;var t=""+e._i,s,r,a,n,i,u=t.length,c=0,g,R;for(a=It(e._f,e._locale).match(at)||[],R=a.length,s=0;s<R;s++)n=a[s],r=(t.match(Xs(n,e))||[])[0],r&&(i=t.substr(0,t.indexOf(r)),i.length>0&&y(e).unusedInput.push(i),t=t.slice(t.indexOf(r)+r.length),c+=r.length),ue[n]?(r?y(e).empty=!1:y(e).unusedTokens.push(n),tr(n,r,e)):e._strict&&!r&&y(e).unusedTokens.push(n);y(e).charsLeftOver=u-c,t.length>0&&y(e).unusedInput.push(t),e._a[N]<=12&&y(e).bigHour===!0&&e._a[N]>0&&(y(e).bigHour=void 0),y(e).parsedDateParts=e._a.slice(0),y(e).meridiem=e._meridiem,e._a[N]=ca(e._locale,e._a[N],e._meridiem),g=y(e).era,g!==null&&(e._a[W]=e._locale.erasConvertYear(g,e._a[W])),gt(e),yt(e)}function ca(e,t,s){var r;return s==null?t:e.meridiemHour!=null?e.meridiemHour(t,s):(e.isPM!=null&&(r=e.isPM(s),r&&t<12&&(t+=12),!r&&t===12&&(t=0)),t)}function ma(e){var t,s,r,a,n,i,u=!1,c=e._f.length;if(c===0){y(e).invalidFormat=!0,e._d=new Date(NaN);return}for(a=0;a<c;a++)n=0,i=!1,t=et({},e),e._useUTC!=null&&(t._useUTC=e._useUTC),t._f=e._f[a],kt(t),Ke(t)&&(i=!0),n+=y(t).charsLeftOver,n+=y(t).unusedTokens.length*10,y(t).score=n,u?n<r&&(r=n,s=t):(r==null||n<r||i)&&(r=n,s=t,i&&(u=!0));se(e,s||t)}function _a(e){if(!e._d){var t=it(e._i),s=t.day===void 0?t.date:t.day;e._a=xe([t.year,t.month,s,t.hour,t.minute,t.second,t.millisecond],function(r){return r&&parseInt(r,10)}),gt(e)}}function ya(e){var t=new ke(yt(ss(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function ss(e){var t=e._i,s=e._f;return e._locale=e._locale||Q(e._l),t===null||s===void 0&&t===""?Pe({nullInput:!0}):(typeof t=="string"&&(e._i=t=e._locale.preparse(t)),E(t)?new ke(yt(t)):(F(t)?e._d=t:m(s)?ma(e):s?kt(e):wa(e),Ke(e)||(e._d=null),e))}function wa(e){var t=e._i;Y(t)?e._d=new Date(o.now()):F(t)?e._d=new Date(t.valueOf()):typeof t=="string"?da(e):m(t)?(e._a=xe(t.slice(0),function(s){return parseInt(s,10)}),gt(e)):M(t)?_a(e):O(t)?e._d=new Date(t):o.createFromInputFallback(e)}function rs(e,t,s,r,a){var n={};return(t===!0||t===!1)&&(r=t,t=void 0),(s===!0||s===!1)&&(r=s,s=void 0),(M(e)&&p(e)||m(e)&&e.length===0)&&(e=void 0),n._isAMomentObject=!0,n._useUTC=n._isUTC=a,n._l=s,n._i=e,n._f=t,n._strict=r,ya(n)}function b(e,t,s,r){return rs(e,t,s,r,!1)}var ga=C("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=b.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:Pe()}),ka=C("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=b.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:Pe()});function as(e,t){var s,r;if(t.length===1&&m(t[0])&&(t=t[0]),!t.length)return b();for(s=t[0],r=1;r<t.length;++r)(!t[r].isValid()||t[r][e](s))&&(s=t[r]);return s}function Sa(){var e=[].slice.call(arguments,0);return as("isBefore",e)}function Ma(){var e=[].slice.call(arguments,0);return as("isAfter",e)}var Da=function(){return Date.now?Date.now():+new Date},be=["year","quarter","month","week","day","hour","minute","second","millisecond"];function va(e){var t,s=!1,r,a=be.length;for(t in e)if(f(e,t)&&!(P.call(be,t)!==-1&&(e[t]==null||!isNaN(e[t]))))return!1;for(r=0;r<a;++r)if(e[be[r]]){if(s)return!1;parseFloat(e[be[r]])!==w(e[be[r]])&&(s=!0)}return!0}function pa(){return this._isValid}function Ya(){return H(NaN)}function Ge(e){var t=it(e),s=t.year||0,r=t.quarter||0,a=t.month||0,n=t.week||t.isoWeek||0,i=t.day||0,u=t.hour||0,c=t.minute||0,g=t.second||0,R=t.millisecond||0;this._isValid=va(t),this._milliseconds=+R+g*1e3+c*6e4+u*1e3*60*60,this._days=+i+n*7,this._months=+a+r*3+s*12,this._data={},this._locale=Q(),this._bubble()}function je(e){return e instanceof Ge}function St(e){return e<0?Math.round(-1*e)*-1:Math.round(e)}function Oa(e,t,s){var r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),n=0,i;for(i=0;i<r;i++)(s&&e[i]!==t[i]||!s&&w(e[i])!==w(t[i]))&&n++;return n+a}function ns(e,t){h(e,0,0,function(){var s=this.utcOffset(),r="+";return s<0&&(s=-s,r="-"),r+$(~~(s/60),2)+t+$(~~s%60,2)})}ns("Z",":"),ns("ZZ",""),d("Z",Le),d("ZZ",Le),v(["Z","ZZ"],function(e,t,s){s._useUTC=!0,s._tzm=Mt(Le,e)});var Ta=/([\+\-]|\d\d)/gi;function Mt(e,t){var s=(t||"").match(e),r,a,n;return s===null?null:(r=s[s.length-1]||[],a=(r+"").match(Ta)||["-",0,0],n=+(a[1]*60)+w(a[2]),n===0?0:a[0]==="+"?n:-n)}function Dt(e,t){var s,r;return t._isUTC?(s=t.clone(),r=(E(e)||F(e)?e.valueOf():b(e).valueOf())-s.valueOf(),s._d.setTime(s._d.valueOf()+r),o.updateOffset(s,!1),s):b(e).local()}function vt(e){return-Math.round(e._d.getTimezoneOffset())}o.updateOffset=function(){};function ba(e,t,s){var r=this._offset||0,a;if(!this.isValid())return e!=null?this:NaN;if(e!=null){if(typeof e=="string"){if(e=Mt(Le,e),e===null)return this}else Math.abs(e)<16&&!s&&(e=e*60);return!this._isUTC&&t&&(a=vt(this)),this._offset=e,this._isUTC=!0,a!=null&&this.add(a,"m"),r!==e&&(!t||this._changeInProgress?us(this,H(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,o.updateOffset(this,!0),this._changeInProgress=null)),this}else return this._isUTC?r:vt(this)}function xa(e,t){return e!=null?(typeof e!="string"&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Pa(e){return this.utcOffset(0,e)}function Na(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(vt(this),"m")),this}function Wa(){if(this._tzm!=null)this.utcOffset(this._tzm,!1,!0);else if(typeof this._i=="string"){var e=Mt(Qs,this._i);e!=null?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Ra(e){return this.isValid()?(e=e?b(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Fa(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ia(){if(!Y(this._isDSTShifted))return this._isDSTShifted;var e={},t;return et(e,this),e=ss(e),e._a?(t=e._isUTC?G(e._a):b(e._a),this._isDSTShifted=this.isValid()&&Oa(e._a,t.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}function Ca(){return this.isValid()?!this._isUTC:!1}function La(){return this.isValid()?this._isUTC:!1}function is(){return this.isValid()?this._isUTC&&this._offset===0:!1}var Ua=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Ea=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function H(e,t){var s=e,r=null,a,n,i;return je(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:O(e)||!isNaN(+e)?(s={},t?s[t]=+e:s.milliseconds=+e):(r=Ua.exec(e))?(a=r[1]==="-"?-1:1,s={y:0,d:w(r[z])*a,h:w(r[N])*a,m:w(r[A])*a,s:w(r[B])*a,ms:w(St(r[ie]*1e3))*a}):(r=Ea.exec(e))?(a=r[1]==="-"?-1:1,s={y:oe(r[2],a),M:oe(r[3],a),w:oe(r[4],a),d:oe(r[5],a),h:oe(r[6],a),m:oe(r[7],a),s:oe(r[8],a)}):s==null?s={}:typeof s=="object"&&("from"in s||"to"in s)&&(i=Aa(b(s.from),b(s.to)),s={},s.ms=i.milliseconds,s.M=i.months),n=new Ge(s),je(e)&&f(e,"_locale")&&(n._locale=e._locale),je(e)&&f(e,"_isValid")&&(n._isValid=e._isValid),n}H.fn=Ge.prototype,H.invalid=Ya;function oe(e,t){var s=e&&parseFloat(e.replace(",","."));return(isNaN(s)?0:s)*t}function os(e,t){var s={};return s.months=t.month()-e.month()+(t.year()-e.year())*12,e.clone().add(s.months,"M").isAfter(t)&&--s.months,s.milliseconds=+t-+e.clone().add(s.months,"M"),s}function Aa(e,t){var s;return e.isValid()&&t.isValid()?(t=Dt(t,e),e.isBefore(t)?s=os(e,t):(s=os(t,e),s.milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0}}function ls(e,t){return function(s,r){var a,n;return r!==null&&!isNaN(+r)&&(Ft(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),n=s,s=r,r=n),a=H(s,r),us(this,a,e),this}}function us(e,t,s,r){var a=t._milliseconds,n=St(t._days),i=St(t._months);e.isValid()&&(r=r??!0,i&&$t(e,ve(e,"Month")+i*s),n&&Vt(e,"Date",ve(e,"Date")+n*s),a&&e._d.setTime(e._d.valueOf()+a*s),r&&o.updateOffset(e,n||i))}var Ha=ls(1,"add"),Va=ls(-1,"subtract");function ds(e){return typeof e=="string"||e instanceof String}function Ga(e){return E(e)||F(e)||ds(e)||O(e)||$a(e)||ja(e)||e===null||e===void 0}function ja(e){var t=M(e)&&!p(e),s=!1,r=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],a,n,i=r.length;for(a=0;a<i;a+=1)n=r[a],s=s||f(e,n);return t&&s}function $a(e){var t=m(e),s=!1;return t&&(s=e.filter(function(r){return!O(r)&&ds(e)}).length===0),t&&s}function za(e){var t=M(e)&&!p(e),s=!1,r=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"],a,n;for(a=0;a<r.length;a+=1)n=r[a],s=s||f(e,n);return t&&s}function Za(e,t){var s=e.diff(t,"days",!0);return s<-6?"sameElse":s<-1?"lastWeek":s<0?"lastDay":s<1?"sameDay":s<2?"nextDay":s<7?"nextWeek":"sameElse"}function qa(e,t){arguments.length===1&&(arguments[0]?Ga(arguments[0])?(e=arguments[0],t=void 0):za(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var s=e||b(),r=Dt(s,this).startOf("day"),a=o.calendarFormat(this,r)||"sameElse",n=t&&(j(t[a])?t[a].call(this,s):t[a]);return this.format(n||this.localeData().calendar(a,this,b(s)))}function Ba(){return new ke(this)}function Ja(e,t){var s=E(e)?e:b(e);return this.isValid()&&s.isValid()?(t=L(t)||"millisecond",t==="millisecond"?this.valueOf()>s.valueOf():s.valueOf()<this.clone().startOf(t).valueOf()):!1}function Qa(e,t){var s=E(e)?e:b(e);return this.isValid()&&s.isValid()?(t=L(t)||"millisecond",t==="millisecond"?this.valueOf()<s.valueOf():this.clone().endOf(t).valueOf()<s.valueOf()):!1}function Ka(e,t,s,r){var a=E(e)?e:b(e),n=E(t)?t:b(t);return this.isValid()&&a.isValid()&&n.isValid()?(r=r||"()",(r[0]==="("?this.isAfter(a,s):!this.isBefore(a,s))&&(r[1]===")"?this.isBefore(n,s):!this.isAfter(n,s))):!1}function Xa(e,t){var s=E(e)?e:b(e),r;return this.isValid()&&s.isValid()?(t=L(t)||"millisecond",t==="millisecond"?this.valueOf()===s.valueOf():(r=s.valueOf(),this.clone().startOf(t).valueOf()<=r&&r<=this.clone().endOf(t).valueOf())):!1}function en(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function tn(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function sn(e,t,s){var r,a,n;if(!this.isValid())return NaN;if(r=Dt(e,this),!r.isValid())return NaN;switch(a=(r.utcOffset()-this.utcOffset())*6e4,t=L(t),t){case"year":n=$e(this,r)/12;break;case"month":n=$e(this,r);break;case"quarter":n=$e(this,r)/3;break;case"second":n=(this-r)/1e3;break;case"minute":n=(this-r)/6e4;break;case"hour":n=(this-r)/36e5;break;case"day":n=(this-r-a)/864e5;break;case"week":n=(this-r-a)/6048e5;break;default:n=this-r}return s?n:U(n)}function $e(e,t){if(e.date()<t.date())return-$e(t,e);var s=(t.year()-e.year())*12+(t.month()-e.month()),r=e.clone().add(s,"months"),a,n;return t-r<0?(a=e.clone().add(s-1,"months"),n=(t-r)/(r-a)):(a=e.clone().add(s+1,"months"),n=(t-r)/(a-r)),-(s+n)||0}o.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",o.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";function rn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function an(e){if(!this.isValid())return null;var t=e!==!0,s=t?this.clone().utc():this;return s.year()<0||s.year()>9999?We(s,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):j(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+this.utcOffset()*60*1e3).toISOString().replace("Z",We(s,"Z")):We(s,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function nn(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="",s,r,a,n;return this.isLocal()||(e=this.utcOffset()===0?"moment.utc":"moment.parseZone",t="Z"),s="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a="-MM-DD[T]HH:mm:ss.SSS",n=t+'[")]',this.format(s+r+a+n)}function on(e){e||(e=this.isUtc()?o.defaultFormatUtc:o.defaultFormat);var t=We(this,e);return this.localeData().postformat(t)}function ln(e,t){return this.isValid()&&(E(e)&&e.isValid()||b(e).isValid())?H({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function un(e){return this.from(b(),e)}function dn(e,t){return this.isValid()&&(E(e)&&e.isValid()||b(e).isValid())?H({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function hn(e){return this.to(b(),e)}function hs(e){var t;return e===void 0?this._locale._abbr:(t=Q(e),t!=null&&(this._locale=t),this)}var fs=C("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return e===void 0?this.localeData():this.locale(e)});function cs(){return this._locale}var ze=1e3,me=60*ze,Ze=60*me,ms=(365*400+97)*24*Ze;function _e(e,t){return(e%t+t)%t}function _s(e,t,s){return e<100&&e>=0?new Date(e+400,t,s)-ms:new Date(e,t,s).valueOf()}function ys(e,t,s){return e<100&&e>=0?Date.UTC(e+400,t,s)-ms:Date.UTC(e,t,s)}function fn(e){var t,s;if(e=L(e),e===void 0||e==="millisecond"||!this.isValid())return this;switch(s=this._isUTC?ys:_s,e){case"year":t=s(this.year(),0,1);break;case"quarter":t=s(this.year(),this.month()-this.month()%3,1);break;case"month":t=s(this.year(),this.month(),1);break;case"week":t=s(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=s(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=_e(t+(this._isUTC?0:this.utcOffset()*me),Ze);break;case"minute":t=this._d.valueOf(),t-=_e(t,me);break;case"second":t=this._d.valueOf(),t-=_e(t,ze);break}return this._d.setTime(t),o.updateOffset(this,!0),this}function cn(e){var t,s;if(e=L(e),e===void 0||e==="millisecond"||!this.isValid())return this;switch(s=this._isUTC?ys:_s,e){case"year":t=s(this.year()+1,0,1)-1;break;case"quarter":t=s(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=s(this.year(),this.month()+1,1)-1;break;case"week":t=s(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=s(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=Ze-_e(t+(this._isUTC?0:this.utcOffset()*me),Ze)-1;break;case"minute":t=this._d.valueOf(),t+=me-_e(t,me)-1;break;case"second":t=this._d.valueOf(),t+=ze-_e(t,ze)-1;break}return this._d.setTime(t),o.updateOffset(this,!0),this}function mn(){return this._d.valueOf()-(this._offset||0)*6e4}function _n(){return Math.floor(this.valueOf()/1e3)}function yn(){return new Date(this.valueOf())}function wn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function gn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function kn(){return this.isValid()?this.toISOString():null}function Sn(){return Ke(this)}function Mn(){return se({},y(this))}function Dn(){return y(this).overflow}function vn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}h("N",0,0,"eraAbbr"),h("NN",0,0,"eraAbbr"),h("NNN",0,0,"eraAbbr"),h("NNNN",0,0,"eraName"),h("NNNNN",0,0,"eraNarrow"),h("y",["y",1],"yo","eraYear"),h("y",["yy",2],0,"eraYear"),h("y",["yyy",3],0,"eraYear"),h("y",["yyyy",4],0,"eraYear"),d("N",pt),d("NN",pt),d("NNN",pt),d("NNNN",Fn),d("NNNNN",In),v(["N","NN","NNN","NNNN","NNNNN"],function(e,t,s,r){var a=s._locale.erasParse(e,r,s._strict);a?y(s).era=a:y(s).invalidEra=e}),d("y",de),d("yy",de),d("yyy",de),d("yyyy",de),d("yo",Cn),v(["y","yy","yyy","yyyy"],W),v(["yo"],function(e,t,s,r){var a;s._locale._eraYearOrdinalRegex&&(a=e.match(s._locale._eraYearOrdinalRegex)),s._locale.eraYearOrdinalParse?t[W]=s._locale.eraYearOrdinalParse(e,a):t[W]=parseInt(e,10)});function pn(e,t){var s,r,a,n=this._eras||Q("en")._eras;for(s=0,r=n.length;s<r;++s){switch(typeof n[s].since){case"string":a=o(n[s].since).startOf("day"),n[s].since=a.valueOf();break}switch(typeof n[s].until){case"undefined":n[s].until=1/0;break;case"string":a=o(n[s].until).startOf("day").valueOf(),n[s].until=a.valueOf();break}}return n}function Yn(e,t,s){var r,a,n=this.eras(),i,u,c;for(e=e.toUpperCase(),r=0,a=n.length;r<a;++r)if(i=n[r].name.toUpperCase(),u=n[r].abbr.toUpperCase(),c=n[r].narrow.toUpperCase(),s)switch(t){case"N":case"NN":case"NNN":if(u===e)return n[r];break;case"NNNN":if(i===e)return n[r];break;case"NNNNN":if(c===e)return n[r];break}else if([i,u,c].indexOf(e)>=0)return n[r]}function On(e,t){var s=e.since<=e.until?1:-1;return t===void 0?o(e.since).year():o(e.since).year()+(t-e.offset)*s}function Tn(){var e,t,s,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),r[e].since<=s&&s<=r[e].until||r[e].until<=s&&s<=r[e].since)return r[e].name;return""}function bn(){var e,t,s,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),r[e].since<=s&&s<=r[e].until||r[e].until<=s&&s<=r[e].since)return r[e].narrow;return""}function xn(){var e,t,s,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),r[e].since<=s&&s<=r[e].until||r[e].until<=s&&s<=r[e].since)return r[e].abbr;return""}function Pn(){var e,t,s,r,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=a[e].since<=a[e].until?1:-1,r=this.clone().startOf("day").valueOf(),a[e].since<=r&&r<=a[e].until||a[e].until<=r&&r<=a[e].since)return(this.year()-o(a[e].since).year())*s+a[e].offset;return this.year()}function Nn(e){return f(this,"_erasNameRegex")||Yt.call(this),e?this._erasNameRegex:this._erasRegex}function Wn(e){return f(this,"_erasAbbrRegex")||Yt.call(this),e?this._erasAbbrRegex:this._erasRegex}function Rn(e){return f(this,"_erasNarrowRegex")||Yt.call(this),e?this._erasNarrowRegex:this._erasRegex}function pt(e,t){return t.erasAbbrRegex(e)}function Fn(e,t){return t.erasNameRegex(e)}function In(e,t){return t.erasNarrowRegex(e)}function Cn(e,t){return t._eraYearOrdinalRegex||de}function Yt(){var e=[],t=[],s=[],r=[],a,n,i,u,c,g=this.eras();for(a=0,n=g.length;a<n;++a)i=Z(g[a].name),u=Z(g[a].abbr),c=Z(g[a].narrow),t.push(i),e.push(u),s.push(c),r.push(i),r.push(u),r.push(c);this._erasRegex=new RegExp("^("+r.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+t.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+e.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}h(0,["gg",2],0,function(){return this.weekYear()%100}),h(0,["GG",2],0,function(){return this.isoWeekYear()%100});function qe(e,t){h(0,[e,e.length],0,t)}qe("gggg","weekYear"),qe("ggggg","weekYear"),qe("GGGG","isoWeekYear"),qe("GGGGG","isoWeekYear"),d("G",Ce),d("g",Ce),d("GG",T,I),d("gg",T,I),d("GGGG",lt,ot),d("gggg",lt,ot),d("GGGGG",Ie,Re),d("ggggg",Ie,Re),Me(["gggg","ggggg","GGGG","GGGGG"],function(e,t,s,r){t[r.substr(0,2)]=w(e)}),Me(["gg","GG"],function(e,t,s,r){t[r]=o.parseTwoDigitYear(e)});function Ln(e){return ws.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)}function Un(e){return ws.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function En(){return J(this.year(),1,4)}function An(){return J(this.isoWeekYear(),1,4)}function Hn(){var e=this.localeData()._week;return J(this.year(),e.dow,e.doy)}function Vn(){var e=this.localeData()._week;return J(this.weekYear(),e.dow,e.doy)}function ws(e,t,s,r,a){var n;return e==null?Ye(this,r,a).year:(n=J(e,r,a),t>n&&(t=n),Gn.call(this,e,t,s,r,a))}function Gn(e,t,s,r,a){var n=qt(e,t,s,r,a),i=pe(n.year,0,n.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}h("Q",0,"Qo","quarter"),d("Q",Lt),v("Q",function(e,t){t[q]=(w(e)-1)*3});function jn(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}h("D",["DD",2],"Do","date"),d("D",T,he),d("DD",T,I),d("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),v(["D","DD"],z),v("Do",function(e,t){t[z]=w(e.match(T)[0])});var gs=fe("Date",!0);h("DDD",["DDDD",3],"DDDo","dayOfYear"),d("DDD",Fe),d("DDDD",Ut),v(["DDD","DDDD"],function(e,t,s){s._dayOfYear=w(e)});function $n(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}h("m",["mm",2],0,"minute"),d("m",T,ut),d("mm",T,I),v(["m","mm"],A);var zn=fe("Minutes",!1);h("s",["ss",2],0,"second"),d("s",T,ut),d("ss",T,I),v(["s","ss"],B);var Zn=fe("Seconds",!1);h("S",0,0,function(){return~~(this.millisecond()/100)}),h(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),h(0,["SSS",3],0,"millisecond"),h(0,["SSSS",4],0,function(){return this.millisecond()*10}),h(0,["SSSSS",5],0,function(){return this.millisecond()*100}),h(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3}),h(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4}),h(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5}),h(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6}),d("S",Fe,Lt),d("SS",Fe,I),d("SSS",Fe,Ut);var ae,ks;for(ae="SSSS";ae.length<=9;ae+="S")d(ae,de);function qn(e,t){t[ie]=w(("0."+e)*1e3)}for(ae="S";ae.length<=9;ae+="S")v(ae,qn);ks=fe("Milliseconds",!1),h("z",0,0,"zoneAbbr"),h("zz",0,0,"zoneName");function Bn(){return this._isUTC?"UTC":""}function Jn(){return this._isUTC?"Coordinated Universal Time":""}var l=ke.prototype;l.add=Ha,l.calendar=qa,l.clone=Ba,l.diff=sn,l.endOf=cn,l.format=on,l.from=ln,l.fromNow=un,l.to=dn,l.toNow=hn,l.get=nr,l.invalidAt=Dn,l.isAfter=Ja,l.isBefore=Qa,l.isBetween=Ka,l.isSame=Xa,l.isSameOrAfter=en,l.isSameOrBefore=tn,l.isValid=Sn,l.lang=fs,l.locale=hs,l.localeData=cs,l.max=ka,l.min=ga,l.parsingFlags=Mn,l.set=ir,l.startOf=fn,l.subtract=Va,l.toArray=wn,l.toObject=gn,l.toDate=yn,l.toISOString=an,l.inspect=nn,typeof Symbol<"u"&&Symbol.for!=null&&(l[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),l.toJSON=kn,l.toString=rn,l.unix=_n,l.valueOf=mn,l.creationData=vn,l.eraName=Tn,l.eraNarrow=bn,l.eraAbbr=xn,l.eraYear=Pn,l.year=Ht,l.isLeapYear=ar,l.weekYear=Ln,l.isoWeekYear=Un,l.quarter=l.quarters=jn,l.month=zt,l.daysInMonth=_r,l.week=l.weeks=vr,l.isoWeek=l.isoWeeks=pr,l.weeksInYear=Hn,l.weeksInWeekYear=Vn,l.isoWeeksInYear=En,l.isoWeeksInISOWeekYear=An,l.date=gs,l.day=l.days=Lr,l.weekday=Ur,l.isoWeekday=Er,l.dayOfYear=$n,l.hour=l.hours=zr,l.minute=l.minutes=zn,l.second=l.seconds=Zn,l.millisecond=l.milliseconds=ks,l.utcOffset=ba,l.utc=Pa,l.local=Na,l.parseZone=Wa,l.hasAlignedHourOffset=Ra,l.isDST=Fa,l.isLocal=Ca,l.isUtcOffset=La,l.isUtc=is,l.isUTC=is,l.zoneAbbr=Bn,l.zoneName=Jn,l.dates=C("dates accessor is deprecated. Use date instead.",gs),l.months=C("months accessor is deprecated. Use month instead",zt),l.years=C("years accessor is deprecated. Use year instead",Ht),l.zone=C("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",xa),l.isDSTShifted=C("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Ia);function Qn(e){return b(e*1e3)}function Kn(){return b.apply(null,arguments).parseZone()}function Ss(e){return e}var S=st.prototype;S.calendar=Cs,S.longDateFormat=As,S.invalidDate=Vs,S.ordinal=$s,S.preparse=Ss,S.postformat=Ss,S.relativeTime=Zs,S.pastFuture=qs,S.set=Fs,S.eras=pn,S.erasParse=Yn,S.erasConvertYear=On,S.erasAbbrRegex=Wn,S.erasNameRegex=Nn,S.erasNarrowRegex=Rn,S.months=hr,S.monthsShort=fr,S.monthsParse=mr,S.monthsRegex=wr,S.monthsShortRegex=yr,S.week=kr,S.firstDayOfYear=Dr,S.firstDayOfWeek=Mr,S.weekdays=Wr,S.weekdaysMin=Fr,S.weekdaysShort=Rr,S.weekdaysParse=Cr,S.weekdaysRegex=Ar,S.weekdaysShortRegex=Hr,S.weekdaysMinRegex=Vr,S.isPM=jr,S.meridiem=Zr;function Be(e,t,s,r){var a=Q(),n=G().set(r,t);return a[s](n,e)}function Ms(e,t,s){if(O(e)&&(t=e,e=void 0),e=e||"",t!=null)return Be(e,t,s,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Be(e,r,s,"month");return a}function Ot(e,t,s,r){typeof e=="boolean"?(O(t)&&(s=t,t=void 0),t=t||""):(t=e,s=t,e=!1,O(t)&&(s=t,t=void 0),t=t||"");var a=Q(),n=e?a._week.dow:0,i,u=[];if(s!=null)return Be(t,(s+n)%7,r,"day");for(i=0;i<7;i++)u[i]=Be(t,(i+n)%7,r,"day");return u}function Xn(e,t){return Ms(e,t,"months")}function ei(e,t){return Ms(e,t,"monthsShort")}function ti(e,t,s){return Ot(e,t,s,"weekdays")}function si(e,t,s){return Ot(e,t,s,"weekdaysShort")}function ri(e,t,s){return Ot(e,t,s,"weekdaysMin")}re("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,s=w(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+s}}),o.lang=C("moment.lang is deprecated. Use moment.locale instead.",re),o.langData=C("moment.langData is deprecated. Use moment.localeData instead.",Q);var K=Math.abs;function ai(){var e=this._data;return this._milliseconds=K(this._milliseconds),this._days=K(this._days),this._months=K(this._months),e.milliseconds=K(e.milliseconds),e.seconds=K(e.seconds),e.minutes=K(e.minutes),e.hours=K(e.hours),e.months=K(e.months),e.years=K(e.years),this}function Ds(e,t,s,r){var a=H(t,s);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function ni(e,t){return Ds(this,e,t,1)}function ii(e,t){return Ds(this,e,t,-1)}function vs(e){return e<0?Math.floor(e):Math.ceil(e)}function oi(){var e=this._milliseconds,t=this._days,s=this._months,r=this._data,a,n,i,u,c;return e>=0&&t>=0&&s>=0||e<=0&&t<=0&&s<=0||(e+=vs(Tt(s)+t)*864e5,t=0,s=0),r.milliseconds=e%1e3,a=U(e/1e3),r.seconds=a%60,n=U(a/60),r.minutes=n%60,i=U(n/60),r.hours=i%24,t+=U(i/24),c=U(ps(t)),s+=c,t-=vs(Tt(c)),u=U(s/12),s%=12,r.days=t,r.months=s,r.years=u,this}function ps(e){return e*4800/146097}function Tt(e){return e*146097/4800}function li(e){if(!this.isValid())return NaN;var t,s,r=this._milliseconds;if(e=L(e),e==="month"||e==="quarter"||e==="year")switch(t=this._days+r/864e5,s=this._months+ps(t),e){case"month":return s;case"quarter":return s/3;case"year":return s/12}else switch(t=this._days+Math.round(Tt(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return t*24+r/36e5;case"minute":return t*1440+r/6e4;case"second":return t*86400+r/1e3;case"millisecond":return Math.floor(t*864e5)+r;default:throw new Error("Unknown unit "+e)}}function X(e){return function(){return this.as(e)}}var Ys=X("ms"),ui=X("s"),di=X("m"),hi=X("h"),fi=X("d"),ci=X("w"),mi=X("M"),_i=X("Q"),yi=X("y"),wi=Ys;function gi(){return H(this)}function ki(e){return e=L(e),this.isValid()?this[e+"s"]():NaN}function le(e){return function(){return this.isValid()?this._data[e]:NaN}}var Si=le("milliseconds"),Mi=le("seconds"),Di=le("minutes"),vi=le("hours"),pi=le("days"),Yi=le("months"),Oi=le("years");function Ti(){return U(this.days()/7)}var ee=Math.round,ye={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function bi(e,t,s,r,a){return a.relativeTime(t||1,!!s,e,r)}function xi(e,t,s,r){var a=H(e).abs(),n=ee(a.as("s")),i=ee(a.as("m")),u=ee(a.as("h")),c=ee(a.as("d")),g=ee(a.as("M")),R=ee(a.as("w")),te=ee(a.as("y")),ne=n<=s.ss&&["s",n]||n<s.s&&["ss",n]||i<=1&&["m"]||i<s.m&&["mm",i]||u<=1&&["h"]||u<s.h&&["hh",u]||c<=1&&["d"]||c<s.d&&["dd",c];return s.w!=null&&(ne=ne||R<=1&&["w"]||R<s.w&&["ww",R]),ne=ne||g<=1&&["M"]||g<s.M&&["MM",g]||te<=1&&["y"]||["yy",te],ne[2]=t,ne[3]=+e>0,ne[4]=r,bi.apply(null,ne)}function Pi(e){return e===void 0?ee:typeof e=="function"?(ee=e,!0):!1}function Ni(e,t){return ye[e]===void 0?!1:t===void 0?ye[e]:(ye[e]=t,e==="s"&&(ye.ss=t-1),!0)}function Wi(e,t){if(!this.isValid())return this.localeData().invalidDate();var s=!1,r=ye,a,n;return typeof e=="object"&&(t=e,e=!1),typeof e=="boolean"&&(s=e),typeof t=="object"&&(r=Object.assign({},ye,t),t.s!=null&&t.ss==null&&(r.ss=t.s-1)),a=this.localeData(),n=xi(this,!s,r,a),s&&(n=a.pastFuture(+this,n)),a.postformat(n)}var bt=Math.abs;function we(e){return(e>0)-(e<0)||+e}function Je(){if(!this.isValid())return this.localeData().invalidDate();var e=bt(this._milliseconds)/1e3,t=bt(this._days),s=bt(this._months),r,a,n,i,u=this.asSeconds(),c,g,R,te;return u?(r=U(e/60),a=U(r/60),e%=60,r%=60,n=U(s/12),s%=12,i=e?e.toFixed(3).replace(/\.?0+$/,""):"",c=u<0?"-":"",g=we(this._months)!==we(u)?"-":"",R=we(this._days)!==we(u)?"-":"",te=we(this._milliseconds)!==we(u)?"-":"",c+"P"+(n?g+n+"Y":"")+(s?g+s+"M":"")+(t?R+t+"D":"")+(a||r||e?"T":"")+(a?te+a+"H":"")+(r?te+r+"M":"")+(e?te+i+"S":"")):"P0D"}var k=Ge.prototype;k.isValid=pa,k.abs=ai,k.add=ni,k.subtract=ii,k.as=li,k.asMilliseconds=Ys,k.asSeconds=ui,k.asMinutes=di,k.asHours=hi,k.asDays=fi,k.asWeeks=ci,k.asMonths=mi,k.asQuarters=_i,k.asYears=yi,k.valueOf=wi,k._bubble=oi,k.clone=gi,k.get=ki,k.milliseconds=Si,k.seconds=Mi,k.minutes=Di,k.hours=vi,k.days=pi,k.weeks=Ti,k.months=Yi,k.years=Oi,k.humanize=Wi,k.toISOString=Je,k.toString=Je,k.toJSON=Je,k.locale=hs,k.localeData=cs,k.toIsoString=C("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Je),k.lang=fs,h("X",0,0,"unix"),h("x",0,0,"valueOf"),d("x",Ce),d("X",Ks),v("X",function(e,t,s){s._d=new Date(parseFloat(e)*1e3)}),v("x",function(e,t,s){s._d=new Date(w(e))});return o.version="2.30.1",D(b),o.fn=l,o.min=Sa,o.max=Ma,o.now=Da,o.utc=G,o.unix=Qn,o.months=Xn,o.isDate=F,o.locale=re,o.invalid=Pe,o.duration=H,o.isMoment=E,o.weekdays=ti,o.parseZone=Kn,o.localeData=Q,o.isDuration=je,o.monthsShort=ei,o.weekdaysMin=ri,o.defineLocale=_t,o.updateLocale=Qr,o.locales=Kr,o.weekdaysShort=si,o.normalizeUnits=L,o.relativeTimeRounding=Pi,o.relativeTimeThreshold=Ni,o.calendarFormat=Za,o.prototype=l,o.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},o})});var Ws=Ai(bs()),Hi=24*3600*1e3,xs=100,Vi="http://localhost:3000/v1/classify",Gi=5*60*1e3,Ps=50,ji="AIzaSyDuTZCTPbJl0h_DufU7tzP5j15mbdQSsfk";async function V(_){let{auditLog:o=[]}=await new Promise(m=>chrome.storage.local.get("auditLog",m)),D=new Date().toISOString();o.unshift(`[${D}] ${_}`),o.length>Ps&&(o.length=Ps),await new Promise(m=>chrome.storage.local.set({auditLog:o},m))}chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.get("installationId",_=>{if(!_.installationId){let o=self.crypto.randomUUID();chrome.storage.local.set({installationId:o},()=>{console.log("Installation ID generated and stored:",o),V("Extension installed.")})}})});async function $i(_){let o=`https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails&id=${_}&key=${ji}`;try{let D=await fetch(o);if(!D.ok)throw new Error(`YouTube API request failed with status: ${D.status}`);let m=await D.json();if(m.items&&m.items.length>0){let M=m.items[0],f=M.contentDetails.duration,p=f?Ws.default.duration(f).asSeconds():0;return{videoId:M.id,title:M.snippet.title,descriptionSnippet:M.snippet.description.substring(0,200),channelName:M.snippet.channelTitle,channelId:M.snippet.channelId,durationSec:p}}}catch(D){console.error("Error fetching video metadata:",D),V(`Failed to fetch metadata for video ${_}. Error: ${D.message}`)}return null}async function zi(_){let{installationId:o,lastBackendFailTs:D}=await new Promise(m=>chrome.storage.local.get(["installationId","lastBackendFailTs"],m));if(D&&Date.now()-D<Gi){let m=`Backend is in backoff period. Skipping classification for ${_.length} videos.`;return console.log(m),V(m),null}console.log("Sending videos to backend:",_);try{let m=await fetch(Vi,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({videos:_,installationId:o})});if(!m.ok)throw new Error(`Backend request failed with status: ${m.status}`);await new Promise(p=>chrome.storage.local.remove("lastBackendFailTs",p));let M=await m.json(),f=`Successfully classified ${_.length} videos.`;return console.log(f),V(f),M.classifications}catch(m){console.error("Error classifying videos:",m);let M=`Failed to classify videos. Error: ${m.message}`;return V(M),await new Promise(f=>chrome.storage.local.set({lastBackendFailTs:Date.now()},f)),null}}chrome.alarms.onAlarm.addListener(async _=>{if(_.name==="process-video-queue"){let o=Array.from(Pt.values());if(Pt.clear(),o.length===0){V("Alarm triggered, but video queue was empty.");return}V(`Processing queue with ${o.length} videos.`);let D=await zi(o);if(D){let m=await new Promise(p=>chrome.storage.local.get(null,p)),M=Object.keys(m).filter(p=>p.startsWith("video-classification-")),f={};for(let p in D){let Y=D[p],O=`video-classification-${p}`;f[O]={classification:Y,timestamp:Date.now()}}if(M.length+Object.keys(f).length>xs){let p=M.map(F=>({key:F,timestamp:m[F].timestamp})).sort((F,xe)=>F.timestamp-xe.timestamp),Y=Math.max(0,M.length+Object.keys(f).length-xs),O=p.slice(0,Y).map(F=>F.key);O.length>0&&(await new Promise(F=>chrome.storage.local.remove(O,F)),V(`Pruned ${O.length} old cache entries.`))}await new Promise(p=>chrome.storage.local.set(f,p)),V(`Cached ${Object.keys(f).length} new classifications.`),chrome.tabs.query({url:"*://www.youtube.com/*"},p=>{p.forEach(Y=>{chrome.tabs.sendMessage(Y.id,{type:"CLASSIFICATION_RESULT",classifications:D}).catch(O=>{O.message.includes("Receiving end does not exist")?console.log(`Content script in tab ${Y.id} not ready to receive message.`):console.error(`Error sending message to tab ${Y.id}:`,O)})})})}}});var Pt=new Map,Ns=0;chrome.runtime.onMessage.addListener((_,o,D)=>{if(_.type==="CLASSIFY_VIDEO"){let{videoId:m}=_,M=`video-classification-${m}`;return(async()=>{let p=(await new Promise(O=>chrome.storage.local.get(M,O)))[M];if(p&&Date.now()-p.timestamp<Hi){let O=`Returning cached classification for video ${m}: ${p.classification}`;console.log(O),V(O),D({classification:p.classification});return}let Y=await $i(m);if(!Y){D({error:"Failed to fetch metadata"});return}console.log("No valid cache entry for videoId, adding to queue:",m),Pt.set(m,Y),chrome.alarms.get("process-video-queue",O=>{O||(chrome.alarms.create("process-video-queue",{delayInMinutes:Ns}),V(`Alarm "process-video-queue" created with a ${Ns*60}s delay.`))}),D({status:"queued"})})(),!0}else _.type==="hidden_video_count"&&chrome.action.setBadgeText({text:_.count.toString()})});})();
/*! Bundled license information:

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.30.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCAiLi4vc3JjL3NlcnZpY2Utd29ya2VyL2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMzAuMVxuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGhvb2tDYWxsYmFjaztcblxuICAgIGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCAhPSBudWxsICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGFyckxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICAgICAgcmVzLnB1c2goZm4oYXJyW2ldLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgICAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGIsIGkpKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5OiBmYWxzZSxcbiAgICAgICAgICAgIHVudXNlZFRva2VuczogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dDogW10sXG4gICAgICAgICAgICBvdmVyZmxvdzogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0OiBmYWxzZSxcbiAgICAgICAgICAgIGludmFsaWRFcmE6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGg6IG51bGwsXG4gICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBpc286IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzOiBbXSxcbiAgICAgICAgICAgIGVyYTogbnVsbCxcbiAgICAgICAgICAgIG1lcmlkaWVtOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMjogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2g6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyksXG4gICAgICAgICAgICAgICAgbGVuID0gdC5sZW5ndGggPj4+IDAsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGZsYWdzID0gbnVsbCxcbiAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gZmFsc2UsXG4gICAgICAgICAgICBpc05vd1ZhbGlkID0gbS5fZCAmJiAhaXNOYU4obS5fZC5nZXRUaW1lKCkpO1xuICAgICAgICBpZiAoaXNOb3dWYWxpZCkge1xuICAgICAgICAgICAgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmVtcHR5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRFcmEgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgICAgICBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZChmbGFncykge1xuICAgICAgICB2YXIgbSA9IGNyZWF0ZVVUQyhOYU4pO1xuICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksXG4gICAgLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbiAgICB2YXIgbW9tZW50UHJvcGVydGllcyA9IChob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW10pLFxuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcHJvcCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIG1vbWVudFByb3BlcnRpZXNMZW4gPSBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgICAgICB0by5fcGYgPSBnZXRQYXJzaW5nRmxhZ3MoZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgICAgICB0by5fbG9jYWxlID0gZnJvbS5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vbWVudFByb3BlcnRpZXNMZW4gPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIC8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gTW9tZW50KGNvbmZpZykge1xuICAgICAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AgaW4gY2FzZSB1cGRhdGVPZmZzZXQgY3JlYXRlcyBuZXcgbW9tZW50XG4gICAgICAgIC8vIG9iamVjdHMuXG4gICAgICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudChvYmopIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPT09IGZhbHNlICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbnNvbGUud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICBhcmdMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdMZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChhcmd1bWVudHNbMF0sIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICAgICBtc2cgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbkFyZ3VtZW50czogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoKS5zdGFja1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZW9mIEZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNvbmZpZywgaSkpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gY29uZmlnW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgICAgICAvXFxkezEsMn0vLnNvdXJjZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksXG4gICAgICAgICAgICBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICByZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIoa2V5LCBtb20sIG5vdykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICtcbiAgICAgICAgICAgIGFic051bWJlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID1cbiAgICAgICAgICAgIC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98TnsxLDV9fFlZWVlZWXxZWVlZWXxZWVlZfFlZfHl7Miw0fXx5bz98Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2csXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2csXG4gICAgICAgIGZvcm1hdEZ1bmN0aW9ucyA9IHt9LFxuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICAgICAgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKVxuICAgICAgICAgICAgICAgICAgICA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgIDogYXJyYXlbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBleHBhbmRGb3JtYXQoZm9ybWF0LCBtLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID1cbiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0KGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyXG4gICAgICAgICAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2VucylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU1NTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ0REJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdkZGRkJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5qb2luKCcnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCcsXG4gICAgICAgIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICB3OiAnYSB3ZWVrJyxcbiAgICAgICAgd3c6ICclZCB3ZWVrcycsXG4gICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpXG4gICAgICAgICAgICA/IG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAgICAgICAgICA6IG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge1xuICAgICAgICBEOiAnZGF0ZScsXG4gICAgICAgIGRhdGVzOiAnZGF0ZScsXG4gICAgICAgIGRhdGU6ICdkYXRlJyxcbiAgICAgICAgZDogJ2RheScsXG4gICAgICAgIGRheXM6ICdkYXknLFxuICAgICAgICBkYXk6ICdkYXknLFxuICAgICAgICBlOiAnd2Vla2RheScsXG4gICAgICAgIHdlZWtkYXlzOiAnd2Vla2RheScsXG4gICAgICAgIHdlZWtkYXk6ICd3ZWVrZGF5JyxcbiAgICAgICAgRTogJ2lzb1dlZWtkYXknLFxuICAgICAgICBpc293ZWVrZGF5czogJ2lzb1dlZWtkYXknLFxuICAgICAgICBpc293ZWVrZGF5OiAnaXNvV2Vla2RheScsXG4gICAgICAgIERERDogJ2RheU9mWWVhcicsXG4gICAgICAgIGRheW9meWVhcnM6ICdkYXlPZlllYXInLFxuICAgICAgICBkYXlvZnllYXI6ICdkYXlPZlllYXInLFxuICAgICAgICBoOiAnaG91cicsXG4gICAgICAgIGhvdXJzOiAnaG91cicsXG4gICAgICAgIGhvdXI6ICdob3VyJyxcbiAgICAgICAgbXM6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG1pbGxpc2Vjb25kczogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbWlsbGlzZWNvbmQ6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG06ICdtaW51dGUnLFxuICAgICAgICBtaW51dGVzOiAnbWludXRlJyxcbiAgICAgICAgbWludXRlOiAnbWludXRlJyxcbiAgICAgICAgTTogJ21vbnRoJyxcbiAgICAgICAgbW9udGhzOiAnbW9udGgnLFxuICAgICAgICBtb250aDogJ21vbnRoJyxcbiAgICAgICAgUTogJ3F1YXJ0ZXInLFxuICAgICAgICBxdWFydGVyczogJ3F1YXJ0ZXInLFxuICAgICAgICBxdWFydGVyOiAncXVhcnRlcicsXG4gICAgICAgIHM6ICdzZWNvbmQnLFxuICAgICAgICBzZWNvbmRzOiAnc2Vjb25kJyxcbiAgICAgICAgc2Vjb25kOiAnc2Vjb25kJyxcbiAgICAgICAgZ2c6ICd3ZWVrWWVhcicsXG4gICAgICAgIHdlZWt5ZWFyczogJ3dlZWtZZWFyJyxcbiAgICAgICAgd2Vla3llYXI6ICd3ZWVrWWVhcicsXG4gICAgICAgIEdHOiAnaXNvV2Vla1llYXInLFxuICAgICAgICBpc293ZWVreWVhcnM6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIGlzb3dlZWt5ZWFyOiAnaXNvV2Vla1llYXInLFxuICAgICAgICB3OiAnd2VlaycsXG4gICAgICAgIHdlZWtzOiAnd2VlaycsXG4gICAgICAgIHdlZWs6ICd3ZWVrJyxcbiAgICAgICAgVzogJ2lzb1dlZWsnLFxuICAgICAgICBpc293ZWVrczogJ2lzb1dlZWsnLFxuICAgICAgICBpc293ZWVrOiAnaXNvV2VlaycsXG4gICAgICAgIHk6ICd5ZWFyJyxcbiAgICAgICAgeWVhcnM6ICd5ZWFyJyxcbiAgICAgICAgeWVhcjogJ3llYXInLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHtcbiAgICAgICAgZGF0ZTogOSxcbiAgICAgICAgZGF5OiAxMSxcbiAgICAgICAgd2Vla2RheTogMTEsXG4gICAgICAgIGlzb1dlZWtkYXk6IDExLFxuICAgICAgICBkYXlPZlllYXI6IDQsXG4gICAgICAgIGhvdXI6IDEzLFxuICAgICAgICBtaWxsaXNlY29uZDogMTYsXG4gICAgICAgIG1pbnV0ZTogMTQsXG4gICAgICAgIG1vbnRoOiA4LFxuICAgICAgICBxdWFydGVyOiA3LFxuICAgICAgICBzZWNvbmQ6IDE1LFxuICAgICAgICB3ZWVrWWVhcjogMSxcbiAgICAgICAgaXNvV2Vla1llYXI6IDEsXG4gICAgICAgIHdlZWs6IDUsXG4gICAgICAgIGlzb1dlZWs6IDUsXG4gICAgICAgIHllYXI6IDEsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgICAgICB1O1xuICAgICAgICBmb3IgKHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHVuaXRzT2JqLCB1KSkge1xuICAgICAgICAgICAgICAgIHVuaXRzLnB1c2goeyB1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSA9IC9cXGQvLCAvLyAgICAgICAwIC0gOVxuICAgICAgICBtYXRjaDIgPSAvXFxkXFxkLywgLy8gICAgICAwMCAtIDk5XG4gICAgICAgIG1hdGNoMyA9IC9cXGR7M30vLCAvLyAgICAgMDAwIC0gOTk5XG4gICAgICAgIG1hdGNoNCA9IC9cXGR7NH0vLCAvLyAgICAwMDAwIC0gOTk5OVxuICAgICAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMiA9IC9cXGRcXGQ/LywgLy8gICAgICAgMCAtIDk5XG4gICAgICAgIG1hdGNoM3RvNCA9IC9cXGRcXGRcXGRcXGQ/LywgLy8gICAgIDk5OSAtIDk5OTlcbiAgICAgICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vLCAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMyA9IC9cXGR7MSwzfS8sIC8vICAgICAgIDAgLSA5OTlcbiAgICAgICAgbWF0Y2gxdG80ID0gL1xcZHsxLDR9LywgLy8gICAgICAgMCAtIDk5OTlcbiAgICAgICAgbWF0Y2gxdG82ID0gL1srLV0/XFxkezEsNn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoVW5zaWduZWQgPSAvXFxkKy8sIC8vICAgICAgIDAgLSBpbmZcbiAgICAgICAgbWF0Y2hTaWduZWQgPSAvWystXT9cXGQrLywgLy8gICAgLWluZiAtIGluZlxuICAgICAgICBtYXRjaE9mZnNldCA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naSwgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vLCAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuICAgICAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAgICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgICAgICBtYXRjaFdvcmQgPVxuICAgICAgICAgICAgL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2ksXG4gICAgICAgIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8gPSAvXlsxLTldXFxkPy8sIC8vICAgICAgICAgMS05OVxuICAgICAgICBtYXRjaDF0bzJIYXNaZXJvID0gL14oWzEtOV1cXGR8XFxkKS8sIC8vICAgICAgICAgICAwLTk5XG4gICAgICAgIHJlZ2V4ZXM7XG5cbiAgICByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICAgICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KVxuICAgICAgICAgICAgPyByZWdleFxuICAgICAgICAgICAgOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpc1N0cmljdCAmJiBzdHJpY3RSZWdleCA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShcbiAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnXFxcXCcsICcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0Zsb29yKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZnVuYyA9IGNhbGxiYWNrLFxuICAgICAgICAgICAgdG9rZW5MZW47XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xuICAgIH1cblxuICAgIHZhciBZRUFSID0gMCxcbiAgICAgICAgTU9OVEggPSAxLFxuICAgICAgICBEQVRFID0gMixcbiAgICAgICAgSE9VUiA9IDMsXG4gICAgICAgIE1JTlVURSA9IDQsXG4gICAgICAgIFNFQ09ORCA9IDUsXG4gICAgICAgIE1JTExJU0VDT05EID0gNixcbiAgICAgICAgV0VFSyA9IDcsXG4gICAgICAgIFdFRUtEQVkgPSA4O1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgICAgIHJldHVybiB5IDw9IDk5OTkgPyB6ZXJvRmlsbCh5LCA0KSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgNF0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsIDVdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9XG4gICAgICAgICAgICBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXRTZXQodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQobW9tLCB1bml0KSB7XG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkID0gbW9tLl9kLFxuICAgICAgICAgICAgaXNVVEMgPSBtb20uX2lzVVRDO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSAnTWlsbGlzZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbGxpc2Vjb25kcygpIDogZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDU2Vjb25kcygpIDogZC5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBjYXNlICdNaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01pbnV0ZXMoKSA6IGQuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgY2FzZSAnSG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDSG91cnMoKSA6IGQuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRGF0ZSgpIDogZC5nZXREYXRlKCk7XG4gICAgICAgICAgICBjYXNlICdEYXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRGF5KCkgOiBkLmdldERheSgpO1xuICAgICAgICAgICAgY2FzZSAnTW9udGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTW9udGgoKSA6IGQuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIGNhc2UgJ0Z1bGxZZWFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0Z1bGxZZWFyKCkgOiBkLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBOYU47IC8vIEp1c3QgaW4gY2FzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICB2YXIgZCwgaXNVVEMsIHllYXIsIG1vbnRoLCBkYXRlO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGQgPSBtb20uX2Q7XG4gICAgICAgIGlzVVRDID0gbW9tLl9pc1VUQztcblxuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ01pbGxpc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDXG4gICAgICAgICAgICAgICAgICAgID8gZC5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIDogZC5zZXRNaWxsaXNlY29uZHModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ1NlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDU2Vjb25kcyh2YWx1ZSkgOiBkLnNldFNlY29uZHModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ01pbnV0ZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDTWludXRlcyh2YWx1ZSkgOiBkLnNldE1pbnV0ZXModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0hvdXJzKHZhbHVlKSA6IGQuc2V0SG91cnModmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDRGF0ZSh2YWx1ZSkgOiBkLnNldERhdGUodmFsdWUpKTtcbiAgICAgICAgICAgIC8vIGNhc2UgJ0RheSc6IC8vIE5vdCByZWFsXG4gICAgICAgICAgICAvLyAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0RheSh2YWx1ZSkgOiBkLnNldERheSh2YWx1ZSkpO1xuICAgICAgICAgICAgLy8gY2FzZSAnTW9udGgnOiAvLyBOb3QgdXNlZCBiZWNhdXNlIHdlIG5lZWQgdG8gcGFzcyB0d28gdmFyaWFibGVzXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENNb250aCh2YWx1ZSkgOiBkLnNldE1vbnRoKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdGdWxsWWVhcic6XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIFNlZSBiZWxvdyAuLi5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBKdXN0IGluIGNhc2VcbiAgICAgICAgfVxuXG4gICAgICAgIHllYXIgPSB2YWx1ZTtcbiAgICAgICAgbW9udGggPSBtb20ubW9udGgoKTtcbiAgICAgICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG4gICAgICAgIGRhdGUgPSBkYXRlID09PSAyOSAmJiBtb250aCA9PT0gMSAmJiAhaXNMZWFwWWVhcih5ZWFyKSA/IDI4IDogZGF0ZTtcbiAgICAgICAgdm9pZCAoaXNVVENcbiAgICAgICAgICAgID8gZC5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSlcbiAgICAgICAgICAgIDogZC5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSkpO1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHN0cmluZ0dldCh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdTZXQodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgcHJpb3JpdGl6ZWRMZW4gPSBwcmlvcml0aXplZC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWRMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxXG4gICAgICAgICAgICA/IGlzTGVhcFllYXIoeWVhcilcbiAgICAgICAgICAgICAgICA/IDI5XG4gICAgICAgICAgICAgICAgOiAyOFxuICAgICAgICAgICAgOiAzMSAtICgobW9kTW9udGggJSA3KSAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9XG4gICAgICAgICAgICAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPVxuICAgICAgICAgICAgJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vLFxuICAgICAgICBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1xuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICAgICAodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFtcbiAgICAgICAgICAgICAgICAgIE1PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aChtb20sIHZhbHVlKSB7XG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb250aCA9IHZhbHVlLFxuICAgICAgICAgICAgZGF0ZSA9IG1vbS5kYXRlKCk7XG5cbiAgICAgICAgZGF0ZSA9IGRhdGUgPCAyOSA/IGRhdGUgOiBNYXRoLm1pbihkYXRlLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCBtb250aCkpO1xuICAgICAgICB2b2lkIChtb20uX2lzVVRDXG4gICAgICAgICAgICA/IG1vbS5fZC5zZXRVVENNb250aChtb250aCwgZGF0ZSlcbiAgICAgICAgICAgIDogbW9tLl9kLnNldE1vbnRoKG1vbnRoLCBkYXRlKSk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGgodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIHNob3J0UCxcbiAgICAgICAgICAgIGxvbmdQO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UCA9IHJlZ2V4RXNjYXBlKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ1AgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0UCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ1ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25nUCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0UCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSh5KSB7XG4gICAgICAgIHZhciBkYXRlLCBhcmdzO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLFxuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlayxcbiAgICAgICAgICAgIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ3cnLCAnd3cnLCAnVycsICdXVyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID1cbiAgICAgICAgICAgICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1xuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1tcbiAgICAgICAgICAgICAgICAgIG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB3ZWVrZGF5c1ttLmRheSgpXVxuICAgICAgICAgICAgICA6IHdlZWtkYXlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQobSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXVxuICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4obSkge1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldXG4gICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRheSA9IGdldCh0aGlzLCAnRGF5Jyk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIHNob3J0UGllY2VzID0gW10sXG4gICAgICAgICAgICBsb25nUGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIG1pbnAsXG4gICAgICAgICAgICBzaG9ydHAsXG4gICAgICAgICAgICBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c01pbihtb20sICcnKSk7XG4gICAgICAgICAgICBzaG9ydHAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICAgICAgbG9uZ3AgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbiAgICBhZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgaEZvcm1hdC5hcHBseSh0aGlzKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICB0aGlzLmhvdXJzKCkgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0odG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKFxuICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoKSxcbiAgICAgICAgICAgICAgICB0aGlzLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgICBsb3dlcmNhc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbiAgICB9XG5cbiAgICBhZGRSZWdleFRva2VuKCdhJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2gnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0oaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgICAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICAgICAgcmV0dXJuIChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pLFxuICAgICAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAgICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgdGhleSB3YW50LiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbiAgICAgICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgICAgIC8vIHRoaXMgcnVsZS5cbiAgICAgICAgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbShob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlLFxuICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG4gICAgdmFyIGxvY2FsZXMgPSB7fSxcbiAgICAgICAgbG9jYWxlRmFtaWxpZXMgPSB7fSxcbiAgICAgICAgZ2xvYmFsTG9jYWxlO1xuXG4gICAgZnVuY3Rpb24gY29tbW9uUHJlZml4KGFycjEsIGFycjIpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBtaW5sID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1pbmw7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWlubDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBzcGxpdDtcblxuICAgICAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBuZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQubGVuZ3RoID49IGogJiZcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uUHJlZml4KHNwbGl0LCBuZXh0KSA+PSBqIC0gMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpIHtcbiAgICAgICAgLy8gUHJldmVudCBuYW1lcyB0aGF0IGxvb2sgbGlrZSBmaWxlc3lzdGVtIHBhdGhzLCBpLmUgY29udGFpbiAnLycgb3IgJ1xcJ1xuICAgICAgICAvLyBFbnN1cmUgbmFtZSBpcyBhdmFpbGFibGUgYW5kIGZ1bmN0aW9uIHJldHVybnMgYm9vbGVhblxuICAgICAgICByZXR1cm4gISEobmFtZSAmJiBuYW1lLm1hdGNoKCdeW14vXFxcXFxcXFxdKiQnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsLFxuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmU7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJlxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgJiZcbiAgICAgICAgICAgIGlzTG9jYWxlTmFtZVNhbmUobmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIG5vdCBmb3VuZCB0byBhdm9pZCByZXBlYXRpbmcgZXhwZW5zaXZlIGZpbGUgcmVxdWlyZSBjYWxsIGNhdXNpbmcgaGlnaCBDUFVcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBmaW5kIGVuLVVTLCBlbl9VUywgZW4tdXMgZm9yIGV2ZXJ5IGZvcm1hdCBjYWxsXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG51bGw7IC8vIG51bGwgbWVhbnMgbm90IGZvdW5kXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZShrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0xvY2FsZSAnICsga2V5ICsgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICAnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcblxuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCAmJiBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNoaWxkIGxvY2FsZSBpbi1wbGFjZSB0byBhdm9pZCBtZW1vcnktbGVha3NcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldChtZXJnZUNvbmZpZ3MobG9jYWxlc1tuYW1lXS5fY29uZmlnLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlTG9jYWxlIGlzIGNhbGxlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBhYmJyIHNvIGl0IHdpbGwgaGF2ZSBhIG5hbWUgKGdldHRlcnMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBvdGhlcndpc2UpLlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdyxcbiAgICAgICAgICAgIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgICAgICA/IE1PTlRIXG4gICAgICAgICAgICAgICAgICAgIDogYVtEQVRFXSA8IDEgfHwgYVtEQVRFXSA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKVxuICAgICAgICAgICAgICAgICAgICAgID8gREFURVxuICAgICAgICAgICAgICAgICAgICAgIDogYVtIT1VSXSA8IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYVtIT1VSXSA+IDI0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIChhW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbTUlOVVRFXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbU0VDT05EXSAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdICE9PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gSE9VUlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTlVURV0gPCAwIHx8IGFbTUlOVVRFXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlOVVRFXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYVtTRUNPTkRdIDwgMCB8fCBhW1NFQ09ORF0gPiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gU0VDT05EXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gTUlMTElTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLTE7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmXG4gICAgICAgICAgICAgICAgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgYmFzaWNJc29SZWdleCA9XG4gICAgICAgICAgICAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkfCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vLFxuICAgICAgICBpc29EYXRlcyA9IFtcbiAgICAgICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXSxcbiAgICAgICAgICAgIFsnWVlZWU1NJywgL1xcZHs2fS8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWScsIC9cXGR7NH0vLCBmYWxzZV0sXG4gICAgICAgIF0sXG4gICAgICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICAgICAgaXNvVGltZXMgPSBbXG4gICAgICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICAgICAgWydISCcsIC9cXGRcXGQvXSxcbiAgICAgICAgXSxcbiAgICAgICAgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKCgtP1xcZCspL2ksXG4gICAgICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICAgICAgcmZjMjgyMiA9XG4gICAgICAgICAgICAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvLFxuICAgICAgICBvYnNPZmZzZXRzID0ge1xuICAgICAgICAgICAgVVQ6IDAsXG4gICAgICAgICAgICBHTVQ6IDAsXG4gICAgICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgICAgICBQU1Q6IC04ICogNjAsXG4gICAgICAgIH07XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsXG4gICAgICAgICAgICBkYXRlRm9ybWF0LFxuICAgICAgICAgICAgdGltZUZvcm1hdCxcbiAgICAgICAgICAgIHR6Rm9ybWF0LFxuICAgICAgICAgICAgaXNvRGF0ZXNMZW4gPSBpc29EYXRlcy5sZW5ndGgsXG4gICAgICAgICAgICBpc29UaW1lc0xlbiA9IGlzb1RpbWVzLmxlbmd0aDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXNMZW47IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICB5ZWFyU3RyLFxuICAgICAgICBtb250aFN0cixcbiAgICAgICAgZGF5U3RyLFxuICAgICAgICBob3VyU3RyLFxuICAgICAgICBtaW51dGVTdHIsXG4gICAgICAgIHNlY29uZFN0clxuICAgICkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApLFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXChbXigpXSpcXCl8W1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcc1xccyovLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW5kZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFswXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMV0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzJdXG4gICAgICAgICAgICAgICAgKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKSxcbiAgICAgICAgICAgICAgICBtID0gaG0gJSAxMDAsXG4gICAgICAgICAgICAgICAgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKSxcbiAgICAgICAgICAgIHBhcnNlZEFycmF5O1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgICAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgICAgICBtYXRjaFszXSxcbiAgICAgICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs2XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs3XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gMSkgQVNQLk5FVCwgMikgSVNPLCAzKSBSRkMgMjgyMiBmb3JtYXRzLCBvciA0KSBvcHRpb25hbCBmYWxsYmFjayBpZiBwYXJzaW5nIGlzbid0IHN0cmljdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX3N0cmljdCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAgICAgJ2Rpc2NvdXJhZ2VkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBpbnB1dCA9IFtdLFxuICAgICAgICAgICAgY3VycmVudERhdGUsXG4gICAgICAgICAgICBleHBlY3RlZFdlZWtkYXksXG4gICAgICAgICAgICB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHxcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPVxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9PSBudWxsID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgICk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDXG4gICAgICAgICAgICA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKVxuICAgICAgICAgICAgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fdyAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdywgY3VyV2VlaztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKFxuICAgICAgICAgICAgICAgIHcuR0csXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdLFxuICAgICAgICAgICAgICAgIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgdG9rZW5zLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwLFxuICAgICAgICAgICAgZXJhLFxuICAgICAgICAgICAgdG9rZW5MZW47XG5cbiAgICAgICAgdG9rZW5zID1cbiAgICAgICAgICAgIGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcbiAgICAgICAgdG9rZW5MZW4gPSB0b2tlbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5MZW47IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fFxuICAgICAgICAgICAgICAgIFtdKVswXTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9XG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChcbiAgICAgICAgICAgIGNvbmZpZy5fbG9jYWxlLFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdLFxuICAgICAgICAgICAgY29uZmlnLl9tZXJpZGllbVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlcmFcbiAgICAgICAgZXJhID0gZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhO1xuICAgICAgICBpZiAoZXJhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFzQ29udmVydFllYXIoZXJhLCBjb25maWcuX2FbWUVBUl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSxcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQsXG4gICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlnZkxlbiA9IGNvbmZpZy5fZi5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGNvbmZpZ2ZMZW4gPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWdmTGVuOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKGlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmICghYmVzdEZvcm1hdElzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZEZvcm1hdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSksXG4gICAgICAgICAgICBkYXlPckRhdGUgPSBpLmRheSA9PT0gdW5kZWZpbmVkID8gaS5kYXRlIDogaS5kYXk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChcbiAgICAgICAgICAgIFtpLnllYXIsIGkubW9udGgsIGRheU9yRGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoeyBudWxsSW5wdXQ6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdHJ1ZSB8fCBmb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4KCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICtuZXcgRGF0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbXG4gICAgICAgICd5ZWFyJyxcbiAgICAgICAgJ3F1YXJ0ZXInLFxuICAgICAgICAnbW9udGgnLFxuICAgICAgICAnd2VlaycsXG4gICAgICAgICdkYXknLFxuICAgICAgICAnaG91cicsXG4gICAgICAgICdtaW51dGUnLFxuICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICBdO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gZmFsc2UsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3JkZXJMZW4gPSBvcmRlcmluZy5sZW5ndGg7XG4gICAgICAgIGZvciAoa2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKG0sIGtleSkgJiZcbiAgICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXJMZW47ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID1cbiAgICAgICAgICAgICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgKyB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgKyBxdWFydGVycyAqIDMgKyB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpLFxuICAgICAgICAgICAgICAgIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgc2lnbiArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fm9mZnNldCAlIDYwLCAyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpLFxuICAgICAgICAgICAgY2h1bmssXG4gICAgICAgICAgICBwYXJ0cyxcbiAgICAgICAgICAgIG1pbnV0ZXM7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY2h1bmsgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHBhcnRzID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgPyAwIDogcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPVxuICAgICAgICAgICAgICAgIChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0KG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0KGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge30sXG4gICAgICAgICAgICBvdGhlcjtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID1cbiAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJiBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXigtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspOihcXGQrKSg/OjooXFxkKykoXFwuXFxkKik/KT8kLyxcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAgICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgICAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgICAgIGlzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbihpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXM6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTTogaW5wdXQuX21vbnRocyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpIHx8ICFpc05hTigraW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSAraW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9ICtpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICBkOiB0b0ludChtYXRjaFtEQVRFXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIGg6IHRvSW50KG1hdGNoW0hPVVJdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbTogdG9JbnQobWF0Y2hbTUlOVVRFXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIHM6IHRvSW50KG1hdGNoW1NFQ09ORF0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtczogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiwgLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgTTogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHc6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBkOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG06IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgICAgICBzOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbiksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pXG4gICAgICAgICkge1xuICAgICAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19pc1ZhbGlkJykpIHtcbiAgICAgICAgICAgIHJldC5faXNWYWxpZCA9IGlucHV0Ll9pc1ZhbGlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbiAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28oaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICByZXMubW9udGhzID1cbiAgICAgICAgICAgIG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgKyAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7XG4gICAgICAgICAgICAgICAgdmFsID0gcGVyaW9kO1xuICAgICAgICAgICAgICAgIHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZCA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKSxcbiAgICAgICAgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZztcbiAgICB9XG5cbiAgICAvLyB0eXBlIE1vbWVudElucHV0ID0gTW9tZW50IHwgRGF0ZSB8IHN0cmluZyB8IG51bWJlciB8IChudW1iZXIgfCBzdHJpbmcpW10gfCBNb21lbnRJbnB1dE9iamVjdCB8IHZvaWQ7IC8vIG51bGwgfCB1bmRlZmluZWRcbiAgICBmdW5jdGlvbiBpc01vbWVudElucHV0KGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpc01vbWVudChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzRGF0ZShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzU3RyaW5nKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXIoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IG51bGwgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSB1bmRlZmluZWRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01vbWVudElucHV0T2JqZWN0KGlucHV0KSB7XG4gICAgICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAneWVhcnMnLFxuICAgICAgICAgICAgICAgICd5ZWFyJyxcbiAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgJ21vbnRocycsXG4gICAgICAgICAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgICAgICAgICAnTScsXG4gICAgICAgICAgICAgICAgJ2RheXMnLFxuICAgICAgICAgICAgICAgICdkYXknLFxuICAgICAgICAgICAgICAgICdkJyxcbiAgICAgICAgICAgICAgICAnZGF0ZXMnLFxuICAgICAgICAgICAgICAgICdkYXRlJyxcbiAgICAgICAgICAgICAgICAnRCcsXG4gICAgICAgICAgICAgICAgJ2hvdXJzJyxcbiAgICAgICAgICAgICAgICAnaG91cicsXG4gICAgICAgICAgICAgICAgJ2gnLFxuICAgICAgICAgICAgICAgICdtaW51dGVzJyxcbiAgICAgICAgICAgICAgICAnbWludXRlJyxcbiAgICAgICAgICAgICAgICAnbScsXG4gICAgICAgICAgICAgICAgJ3NlY29uZHMnLFxuICAgICAgICAgICAgICAgICdzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdzJyxcbiAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgICAgICdtcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgcHJvcGVydHlMZW4gPSBwcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydHlMZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlck9yU3RyaW5nQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgdmFyIGFycmF5VGVzdCA9IGlzQXJyYXkoaW5wdXQpLFxuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID0gZmFsc2U7XG4gICAgICAgIGlmIChhcnJheVRlc3QpIHtcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9XG4gICAgICAgICAgICAgICAgaW5wdXQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXIoaXRlbSkgJiYgaXNTdHJpbmcoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlUZXN0ICYmIGRhdGFUeXBlVGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NhbGVuZGFyU3BlYyhpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3NhbWVEYXknLFxuICAgICAgICAgICAgICAgICduZXh0RGF5JyxcbiAgICAgICAgICAgICAgICAnbGFzdERheScsXG4gICAgICAgICAgICAgICAgJ25leHRXZWVrJyxcbiAgICAgICAgICAgICAgICAnbGFzdFdlZWsnLFxuICAgICAgICAgICAgICAgICdzYW1lRWxzZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHByb3BlcnR5O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNlxuICAgICAgICAgICAgPyAnc2FtZUVsc2UnXG4gICAgICAgICAgICA6IGRpZmYgPCAtMVxuICAgICAgICAgICAgICA/ICdsYXN0V2VlaydcbiAgICAgICAgICAgICAgOiBkaWZmIDwgMFxuICAgICAgICAgICAgICAgID8gJ2xhc3REYXknXG4gICAgICAgICAgICAgICAgOiBkaWZmIDwgMVxuICAgICAgICAgICAgICAgICAgPyAnc2FtZURheSdcbiAgICAgICAgICAgICAgICAgIDogZGlmZiA8IDJcbiAgICAgICAgICAgICAgICAgICAgPyAnbmV4dERheSdcbiAgICAgICAgICAgICAgICAgICAgOiBkaWZmIDwgN1xuICAgICAgICAgICAgICAgICAgICAgID8gJ25leHRXZWVrJ1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3Igc2luZ2xlIHBhcmFtZXRlciwgZm9ybWF0cyBvbmx5IG92ZXJsb2FkIHRvIHRoZSBjYWxlbmRhciBmdW5jdGlvblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTW9tZW50SW5wdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDYWxlbmRhclNwZWMoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBmb3JtYXRzICYmXG4gICAgICAgICAgICAgICAgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKVxuICAgICAgICAgICAgICAgICAgICA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdylcbiAgICAgICAgICAgICAgICAgICAgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChcbiAgICAgICAgICAgIG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2Vlbihmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0JlZm9yZShsb2NhbEZyb20sIHVuaXRzKSkgJiZcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiZcbiAgICAgICAgICAgICAgICBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaWZmKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCwgem9uZURlbHRhLCBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDZlNDtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYoYSwgYikge1xuICAgICAgICBpZiAoYS5kYXRlKCkgPCBiLmRhdGUoKSkge1xuICAgICAgICAgICAgLy8gZW5kLW9mLW1vbnRoIGNhbGN1bGF0aW9ucyB3b3JrIGNvcnJlY3Qgd2hlbiB0aGUgc3RhcnQgbW9udGggaGFzIG1vcmVcbiAgICAgICAgICAgIC8vIGRheXMgdGhhbiB0aGUgZW5kIG1vbnRoLlxuICAgICAgICAgICAgcmV0dXJuIC1tb250aERpZmYoYiwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLFxuICAgICAgICAgICAgYWRqdXN0O1xuXG4gICAgICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgLSAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvcjIgLSBhbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgICAgICByZXR1cm4gLSh3aG9sZU1vbnRoRGlmZiArIGFkanVzdCkgfHwgMDtcbiAgICB9XG5cbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbiAgICBob29rcy5kZWZhdWx0Rm9ybWF0VXRjID0gJ1lZWVktTU0tRERUSEg6bW06c3NbWl0nO1xuXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlLFxuICAgICAgICAgICAgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgICAgIG0sXG4gICAgICAgICAgICAgICAgdXRjXG4gICAgICAgICAgICAgICAgICAgID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXSdcbiAgICAgICAgICAgICAgICAgICAgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICAgICAgaWYgKHV0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSArIHRoaXMudXRjT2Zmc2V0KCkgKiA2MCAqIDEwMDApXG4gICAgICAgICAgICAgICAgICAgIC50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICBtLFxuICAgICAgICAgICAgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gICAgICogYWxzbyBiZSBldmFsdWF0ZWQgdG8gZ2V0IGEgbmV3IG1vbWVudCB3aGljaCBpcyB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCcsXG4gICAgICAgICAgICB6b25lID0gJycsXG4gICAgICAgICAgICBwcmVmaXgsXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgZGF0ZXRpbWUsXG4gICAgICAgICAgICBzdWZmaXg7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB5ZWFyID0gMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5ID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgICAgIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKVxuICAgICAgICAgICAgICAgID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0Y1xuICAgICAgICAgICAgICAgIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyB0bzogdGhpcywgZnJvbTogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZnJvbTogdGhpcywgdG86IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICAvLyBJZiBwYXNzZWQgYSBsb2NhbGUga2V5LCBpdCB3aWxsIHNldCB0aGUgbG9jYWxlIGZvciB0aGlzXG4gICAgLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuICAgIC8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBsb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMCxcbiAgICAgICAgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORCxcbiAgICAgICAgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEUsXG4gICAgICAgIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuICgoZGl2aWRlbmQgJSBkaXZpc29yKSArIGRpdmlzb3IpICUgZGl2aXNvcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbFN0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSwgbSwgZCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXRjU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyBEYXRlLlVUQyByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5LCBtLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWUsIHN0YXJ0T2ZEYXRlO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMykgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSArIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9XG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSIC1cbiAgICAgICAgICAgICAgICAgICAgbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgICAgICkgLVxuICAgICAgICAgICAgICAgICAgICAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBtLnllYXIoKSxcbiAgICAgICAgICAgIG0ubW9udGgoKSxcbiAgICAgICAgICAgIG0uZGF0ZSgpLFxuICAgICAgICAgICAgbS5ob3VyKCksXG4gICAgICAgICAgICBtLm1pbnV0ZSgpLFxuICAgICAgICAgICAgbS5zZWNvbmQoKSxcbiAgICAgICAgICAgIG0ubWlsbGlzZWNvbmQoKSxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMigpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3QsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ04nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk4nLCAwLCAwLCAnZXJhTmFtZScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OTicsIDAsIDAsICdlcmFOYXJyb3cnKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5JywgMV0sICd5bycsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5JywgMl0sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eScsIDNdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXl5JywgNF0sIDAsICdlcmFZZWFyJyk7XG5cbiAgICBhZGRSZWdleFRva2VuKCdOJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OJywgbWF0Y2hFcmFOYW1lKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk5OTicsIG1hdGNoRXJhTmFycm93KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oXG4gICAgICAgIFsnTicsICdOTicsICdOTk4nLCAnTk5OTicsICdOTk5OTiddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgZXJhID0gY29uZmlnLl9sb2NhbGUuZXJhc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAgICAgaWYgKGVyYSkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYSA9IGVyYTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEVyYSA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3knLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5bycsIG1hdGNoRXJhWWVhck9yZGluYWwpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ3knLCAneXknLCAneXl5JywgJ3l5eXknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3lvJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpIHtcbiAgICAgICAgICAgIG1hdGNoID0gaW5wdXQubWF0Y2goY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UpIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZShpbnB1dCwgbWF0Y2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuX2VyYXMgfHwgZ2V0TG9jYWxlKCdlbicpLl9lcmFzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnNpbmNlKS5zdGFydE9mKCdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5zaW5jZSA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSArSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0udW50aWwpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJhcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzUGFyc2UoZXJhTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFiYnIsXG4gICAgICAgICAgICBuYXJyb3c7XG4gICAgICAgIGVyYU5hbWUgPSBlcmFOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBuYW1lID0gZXJhc1tpXS5uYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBhYmJyID0gZXJhc1tpXS5hYmJyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBuYXJyb3cgPSBlcmFzW2ldLm5hcnJvdy50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmJyID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFycm93ID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtuYW1lLCBhYmJyLCBuYXJyb3ddLmluZGV4T2YoZXJhTmFtZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc0NvbnZlcnRZZWFyKGVyYSwgeWVhcikge1xuICAgICAgICB2YXIgZGlyID0gZXJhLnNpbmNlIDw9IGVyYS51bnRpbCA/ICsxIDogLTE7XG4gICAgICAgIGlmICh5ZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKSArICh5ZWFyIC0gZXJhLm9mZnNldCkgKiBkaXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYW1lKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hcnJvdygpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhQWJicigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFZZWFyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkaXIsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGRpciA9IGVyYXNbaV0uc2luY2UgPD0gZXJhc1tpXS51bnRpbCA/ICsxIDogLTE7XG5cbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHx8XG4gICAgICAgICAgICAgICAgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMueWVhcigpIC0gaG9va3MoZXJhc1tpXS5zaW5jZSkueWVhcigpKSAqIGRpciArXG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0ub2Zmc2V0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYW1lUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYW1lUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc0FiYnJSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzQWJiclJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzQWJiclJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYXJyb3dSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFycm93UmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYXJyb3dSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYUFiYnIoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFtZShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hbWVSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYXJyb3coaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYXJyb3dSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFZZWFyT3JkaW5hbChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXggfHwgbWF0Y2hVbnNpZ25lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlRXJhc1BhcnNlKCkge1xuICAgICAgICB2YXIgYWJiclBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFtZVBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFycm93UGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzTmFtZSxcbiAgICAgICAgICAgIGVyYXNBYmJyLFxuICAgICAgICAgICAgZXJhc05hcnJvdyxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGVyYXNOYW1lID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKTtcbiAgICAgICAgICAgIGVyYXNBYmJyID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKTtcbiAgICAgICAgICAgIGVyYXNOYXJyb3cgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdyk7XG5cbiAgICAgICAgICAgIG5hbWVQaWVjZXMucHVzaChlcmFzTmFtZSk7XG4gICAgICAgICAgICBhYmJyUGllY2VzLnB1c2goZXJhc0FiYnIpO1xuICAgICAgICAgICAgbmFycm93UGllY2VzLnB1c2goZXJhc05hcnJvdyk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNOYW1lKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc0FiYnIpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzTmFycm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VyYXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hbWVSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG5hbWVQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzQWJiclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgYWJiclBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYXJyb3dSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbmFycm93UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFxuICAgICAgICBbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLFxuICAgICAgICBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSArIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrKCksXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWtkYXkoKSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICA0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy5pc29XZWVrWWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5XZWVrWWVhcigpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLndlZWtZZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsXG4gICAgICAgICAgICA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKVxuICAgICAgICAgICAgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArICh0aGlzLm1vbnRoKCkgJSAzKSk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0XG4gICAgICAgICAgICA/IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZVxuICAgICAgICAgICAgOiBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgICAgICBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1XG4gICAgICAgICAgICApICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZChpbnB1dCAtIGRheU9mWWVhciwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbiwgZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvID0gdG87XG4gICAgcHJvdG8udG9Ob3cgPSB0b05vdztcbiAgICBwcm90by5nZXQgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCA9IGluc3BlY3Q7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5mb3IgIT0gbnVsbCkge1xuICAgICAgICBwcm90b1tTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnTW9tZW50PCcgKyB0aGlzLmZvcm1hdCgpICsgJz4nO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90by50b0pTT04gPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8uZXJhTmFtZSA9IGdldEVyYU5hbWU7XG4gICAgcHJvdG8uZXJhTmFycm93ID0gZ2V0RXJhTmFycm93O1xuICAgIHByb3RvLmVyYUFiYnIgPSBnZXRFcmFBYmJyO1xuICAgIHByb3RvLmVyYVllYXIgPSBnZXRFcmFZZWFyO1xuICAgIHByb3RvLnllYXIgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrID0gcHJvdG8ud2Vla3MgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgPSBwcm90by5pc29XZWVrcyA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by53ZWVrc0luV2Vla1llYXIgPSBnZXRXZWVrc0luV2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luSVNPV2Vla1llYXIgPSBnZXRJU09XZWVrc0luSVNPV2Vla1llYXI7XG4gICAgcHJvdG8uZGF0ZSA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ID0gcHJvdG8uZGF5cyA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzID0gZGVwcmVjYXRlKFxuICAgICAgICAnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXREYXlPZk1vbnRoXG4gICAgKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRNb250aFxuICAgICk7XG4gICAgcHJvdG8ueWVhcnMgPSBkZXByZWNhdGUoXG4gICAgICAgICd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0WWVhclxuICAgICk7XG4gICAgcHJvdG8uem9uZSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJyxcbiAgICAgICAgZ2V0U2V0Wm9uZVxuICAgICk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKFxuICAgICAgICAnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsXG4gICAgICAgIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZFxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0KHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCA9IHNldDtcbiAgICBwcm90byQxLmVyYXMgPSBsb2NhbGVFcmFzO1xuICAgIHByb3RvJDEuZXJhc1BhcnNlID0gbG9jYWxlRXJhc1BhcnNlO1xuICAgIHByb3RvJDEuZXJhc0NvbnZlcnRZZWFyID0gbG9jYWxlRXJhc0NvbnZlcnRZZWFyO1xuICAgIHByb3RvJDEuZXJhc0FiYnJSZWdleCA9IGVyYXNBYmJyUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFtZVJlZ2V4ID0gZXJhc05hbWVSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYXJyb3dSZWdleCA9IGVyYXNOYXJyb3dSZWdleDtcblxuICAgIHByb3RvJDEubW9udGhzID0gbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgPSBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlID0gbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyA9IGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gPSBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgPSBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSA9IGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggPSB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ID0gd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCA9IHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDAsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4obG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZXJhczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMS0wMS0wMScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICtJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0Fubm8gRG9taW5pJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ0FEJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAwLTEyLTMxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQmVmb3JlIENocmlzdCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdCQycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB0b0ludCgobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlXG4gICAgKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLFxuICAgICAgICBnZXRMb2NhbGVcbiAgICApO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicygpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyxcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9kYXRhLFxuICAgICAgICAgICAgc2Vjb25kcyxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIChkYXlzICogNDgwMCkgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIChtb250aHMgKiAxNDYwOTcpIC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzLFxuICAgICAgICAgICAgbW9udGhzLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3F1YXJ0ZXInIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMgKyBkYXlzVG9Nb250aHMoZGF5cyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgLyA3ICsgbWlsbGlzZWNvbmRzIC8gNjA0OGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMjQgKyBtaWxsaXNlY29uZHMgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogMTQ0MCArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAvLyBNYXRoLmZsb29yIHByZXZlbnRzIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMgKiA4NjRlNSkgKyBtaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyhhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKSxcbiAgICAgICAgYXNTZWNvbmRzID0gbWFrZUFzKCdzJyksXG4gICAgICAgIGFzTWludXRlcyA9IG1ha2VBcygnbScpLFxuICAgICAgICBhc0hvdXJzID0gbWFrZUFzKCdoJyksXG4gICAgICAgIGFzRGF5cyA9IG1ha2VBcygnZCcpLFxuICAgICAgICBhc1dlZWtzID0gbWFrZUFzKCd3JyksXG4gICAgICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJyksXG4gICAgICAgIGFzUXVhcnRlcnMgPSBtYWtlQXMoJ1EnKSxcbiAgICAgICAgYXNZZWFycyA9IG1ha2VBcygneScpLFxuICAgICAgICB2YWx1ZU9mJDEgPSBhc01pbGxpc2Vjb25kcztcblxuICAgIGZ1bmN0aW9uIGNsb25lJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMih1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpLFxuICAgICAgICBzZWNvbmRzID0gbWFrZUdldHRlcignc2Vjb25kcycpLFxuICAgICAgICBtaW51dGVzID0gbWFrZUdldHRlcignbWludXRlcycpLFxuICAgICAgICBob3VycyA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyksXG4gICAgICAgIGRheXMgPSBtYWtlR2V0dGVyKCdkYXlzJyksXG4gICAgICAgIG1vbnRocyA9IG1ha2VHZXR0ZXIoJ21vbnRocycpLFxuICAgICAgICB5ZWFycyA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcygpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgICAgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgICAgIHNzOiA0NCwgLy8gYSBmZXcgc2Vjb25kcyB0byBzZWNvbmRzXG4gICAgICAgICAgICBzOiA0NSwgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgICAgIG06IDQ1LCAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgICAgIGg6IDIyLCAvLyBob3VycyB0byBkYXlcbiAgICAgICAgICAgIGQ6IDI2LCAvLyBkYXlzIHRvIG1vbnRoL3dlZWtcbiAgICAgICAgICAgIHc6IG51bGwsIC8vIHdlZWtzIHRvIG1vbnRoXG4gICAgICAgICAgICBNOiAxMSwgLy8gbW9udGhzIHRvIHllYXJcbiAgICAgICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIHRocmVzaG9sZHMsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCksXG4gICAgICAgICAgICBzZWNvbmRzID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksXG4gICAgICAgICAgICBtaW51dGVzID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSksXG4gICAgICAgICAgICBob3VycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdoJykpLFxuICAgICAgICAgICAgZGF5cyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLFxuICAgICAgICAgICAgbW9udGhzID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSksXG4gICAgICAgICAgICB3ZWVrcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd3JykpLFxuICAgICAgICAgICAgeWVhcnMgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSxcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgJiYgWydzcycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDw9IDEgJiYgWydtJ10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gJiYgWydtbScsIG1pbnV0ZXNdKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8PSAxICYmIFsnaCddKSB8fFxuICAgICAgICAgICAgICAgIChob3VycyA8IHRocmVzaG9sZHMuaCAmJiBbJ2hoJywgaG91cnNdKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDw9IDEgJiYgWydkJ10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPCB0aHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdKTtcblxuICAgICAgICBpZiAodGhyZXNob2xkcy53ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGEgPVxuICAgICAgICAgICAgICAgIGEgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPD0gMSAmJiBbJ3cnXSkgfHxcbiAgICAgICAgICAgICAgICAod2Vla3MgPCB0aHJlc2hvbGRzLncgJiYgWyd3dycsIHdlZWtzXSk7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEgfHxcbiAgICAgICAgICAgIChtb250aHMgPD0gMSAmJiBbJ00nXSkgfHxcbiAgICAgICAgICAgIChtb250aHMgPCB0aHJlc2hvbGRzLk0gJiYgWydNTScsIG1vbnRoc10pIHx8XG4gICAgICAgICAgICAoeWVhcnMgPD0gMSAmJiBbJ3knXSkgfHwgWyd5eScsIHllYXJzXTtcblxuICAgICAgICBhWzJdID0gd2l0aG91dFN1ZmZpeDtcbiAgICAgICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgICAgIHJldHVybiBzdWJzdGl0dXRlVGltZUFnby5hcHBseShudWxsLCBhKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmcocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByb3VuZGluZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgICAgIH1cbiAgICAgICAgdGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7XG4gICAgICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodW1hbml6ZShhcmdXaXRoU3VmZml4LCBhcmdUaHJlc2hvbGRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpdGhTdWZmaXggPSBmYWxzZSxcbiAgICAgICAgICAgIHRoID0gdGhyZXNob2xkcyxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhcmdUaHJlc2hvbGRzID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgICAgIGFyZ1dpdGhTdWZmaXggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1dpdGhTdWZmaXggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgd2l0aFN1ZmZpeCA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdUaHJlc2hvbGRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGggPSBPYmplY3QuYXNzaWduKHt9LCB0aHJlc2hvbGRzLCBhcmdUaHJlc2hvbGRzKTtcbiAgICAgICAgICAgIGlmIChhcmdUaHJlc2hvbGRzLnMgIT0gbnVsbCAmJiBhcmdUaHJlc2hvbGRzLnNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aC5zcyA9IGFyZ1RocmVzaG9sZHMucyAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIHRoLCBsb2NhbGUpO1xuXG4gICAgICAgIGlmICh3aXRoU3VmZml4KSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhbGUucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gc2lnbih4KSB7XG4gICAgICAgIHJldHVybiAoeCA+IDApIC0gKHggPCAwKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwLFxuICAgICAgICAgICAgZGF5cyA9IGFicyQxKHRoaXMuX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzJDEodGhpcy5fbW9udGhzKSxcbiAgICAgICAgICAgIG1pbnV0ZXMsXG4gICAgICAgICAgICBob3VycyxcbiAgICAgICAgICAgIHllYXJzLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKSxcbiAgICAgICAgICAgIHRvdGFsU2lnbixcbiAgICAgICAgICAgIHltU2lnbixcbiAgICAgICAgICAgIGRheXNTaWduLFxuICAgICAgICAgICAgaG1zU2lnbjtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuXG4gICAgICAgIHRvdGFsU2lnbiA9IHRvdGFsIDwgMCA/ICctJyA6ICcnO1xuICAgICAgICB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgaG1zU2lnbiA9IHNpZ24odGhpcy5fbWlsbGlzZWNvbmRzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdG90YWxTaWduICtcbiAgICAgICAgICAgICdQJyArXG4gICAgICAgICAgICAoeWVhcnMgPyB5bVNpZ24gKyB5ZWFycyArICdZJyA6ICcnKSArXG4gICAgICAgICAgICAobW9udGhzID8geW1TaWduICsgbW9udGhzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChkYXlzID8gZGF5c1NpZ24gKyBkYXlzICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyB8fCBtaW51dGVzIHx8IHNlY29uZHMgPyAnVCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzID8gaG1zU2lnbiArIGhvdXJzICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtaW51dGVzID8gaG1zU2lnbiArIG1pbnV0ZXMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHNlY29uZHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkID0gaXNWYWxpZCQxO1xuICAgIHByb3RvJDIuYWJzID0gYWJzO1xuICAgIHByb3RvJDIuYWRkID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyA9IGFzU2Vjb25kcztcbiAgICBwcm90byQyLmFzTWludXRlcyA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgPSBhc0hvdXJzO1xuICAgIHByb3RvJDIuYXNEYXlzID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyA9IGFzV2Vla3M7XG4gICAgcHJvdG8kMi5hc01vbnRocyA9IGFzTW9udGhzO1xuICAgIHByb3RvJDIuYXNRdWFydGVycyA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgPSB2YWx1ZU9mJDE7XG4gICAgcHJvdG8kMi5fYnViYmxlID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ID0gZ2V0JDI7XG4gICAgcHJvdG8kMi5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzID0gc2Vjb25kcztcbiAgICBwcm90byQyLm1pbnV0ZXMgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgPSBsb2NhbGVEYXRhO1xuXG4gICAgcHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJyxcbiAgICAgICAgdG9JU09TdHJpbmckMVxuICAgICk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0KSAqIDEwMDApO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbiAgICB9KTtcblxuICAgIC8vISBtb21lbnQuanNcblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4zMC4xJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiA9IHByb3RvO1xuICAgIGhvb2tzLm1pbiA9IG1pbjtcbiAgICBob29rcy5tYXggPSBtYXg7XG4gICAgaG9va3Mubm93ID0gbm93O1xuICAgIGhvb2tzLnV0YyA9IGNyZWF0ZVVUQztcbiAgICBob29rcy51bml4ID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCA9IGlzTW9tZW50O1xuICAgIGhvb2tzLndlZWtkYXlzID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhID0gZ2V0TG9jYWxlO1xuICAgIGhvb2tzLmlzRHVyYXRpb24gPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ID0gbGlzdE1vbnRoc1Nob3J0O1xuICAgIGhvb2tzLndlZWtkYXlzTWluID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyA9IGxpc3RMb2NhbGVzO1xuICAgIGhvb2tzLndlZWtkYXlzU2hvcnQgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyA9IG5vcm1hbGl6ZVVuaXRzO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVJvdW5kaW5nID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIC8+XG4gICAgICAgIFRJTUU6ICdISDptbScsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgV0VFSzogJ0dHR0ctW1ddV1cnLCAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nLCAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwgImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmNvbnN0IENBQ0hFX1RUTCA9IDI0ICogMzYwMCAqIDEwMDA7IC8vIDI0IGhvdXJzIGluIG1pbGxpc2Vjb25kc1xyXG5jb25zdCBNQVhfQ0FDSEVfRU5UUklFUyA9IDEwMDtcclxuY29uc3QgQkFDS0VORF9VUkwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwL3YxL2NsYXNzaWZ5JztcclxuY29uc3QgQkFDS09GRl9EVVJBVElPTiA9IDUgKiA2MCAqIDEwMDA7IC8vIDUgbWludXRlc1xyXG5jb25zdCBBVURJVF9MT0dfTUFYX0VOVFJJRVMgPSA1MDtcclxuY29uc3QgWU9VVFVCRV9BUElfS0VZID0gJ0FJemFTeUR1VFpDVFBiSmwwaF9EdWZVN3R6UDVqMTVtYmRRU3Nmayc7IC8vIFRPRE86IFJlcGxhY2Ugd2l0aCB5b3VyIFlvdVR1YmUgRGF0YSBBUEkga2V5XHJcblxyXG5hc3luYyBmdW5jdGlvbiBhZGRBdWRpdExvZyhtZXNzYWdlKSB7XHJcbiAgICBjb25zdCB7IGF1ZGl0TG9nID0gW10gfSA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCdhdWRpdExvZycsIHJlc29sdmUpKTtcclxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgIGF1ZGl0TG9nLnVuc2hpZnQoYFske3RpbWVzdGFtcH1dICR7bWVzc2FnZX1gKTtcclxuICAgIGlmIChhdWRpdExvZy5sZW5ndGggPiBBVURJVF9MT0dfTUFYX0VOVFJJRVMpIHtcclxuICAgICAgICBhdWRpdExvZy5sZW5ndGggPSBBVURJVF9MT0dfTUFYX0VOVFJJRVM7XHJcbiAgICB9XHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGF1ZGl0TG9nIH0sIHJlc29sdmUpKTtcclxufVxyXG5cclxuY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKCkgPT4ge1xyXG4gIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCgnaW5zdGFsbGF0aW9uSWQnLCAocmVzdWx0KSA9PiB7XHJcbiAgICBpZiAoIXJlc3VsdC5pbnN0YWxsYXRpb25JZCkge1xyXG4gICAgICBjb25zdCBpbnN0YWxsYXRpb25JZCA9IHNlbGYuY3J5cHRvLnJhbmRvbVVVSUQoKTtcclxuICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgaW5zdGFsbGF0aW9uSWQgfSwgKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdJbnN0YWxsYXRpb24gSUQgZ2VuZXJhdGVkIGFuZCBzdG9yZWQ6JywgaW5zdGFsbGF0aW9uSWQpO1xyXG4gICAgICAgIGFkZEF1ZGl0TG9nKCdFeHRlbnNpb24gaW5zdGFsbGVkLicpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaFZpZGVvTWV0YWRhdGEodmlkZW9JZCkge1xyXG4gIGNvbnN0IHVybCA9IGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS95b3V0dWJlL3YzL3ZpZGVvcz9wYXJ0PXNuaXBwZXQsY29udGVudERldGFpbHMmaWQ9JHt2aWRlb0lkfSZrZXk9JHtZT1VUVUJFX0FQSV9LRVl9YDtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdVR1YmUgQVBJIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBpZiAoZGF0YS5pdGVtcyAmJiBkYXRhLml0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgaXRlbSA9IGRhdGEuaXRlbXNbMF07XHJcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gaXRlbS5jb250ZW50RGV0YWlscy5kdXJhdGlvbjtcclxuICAgICAgY29uc3QgZHVyYXRpb25TZWMgPSBkdXJhdGlvbiA/IG1vbWVudC5kdXJhdGlvbihkdXJhdGlvbikuYXNTZWNvbmRzKCkgOiAwO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZpZGVvSWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgdGl0bGU6IGl0ZW0uc25pcHBldC50aXRsZSxcclxuICAgICAgICBkZXNjcmlwdGlvblNuaXBwZXQ6IGl0ZW0uc25pcHBldC5kZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgMjAwKSxcclxuICAgICAgICBjaGFubmVsTmFtZTogaXRlbS5zbmlwcGV0LmNoYW5uZWxUaXRsZSxcclxuICAgICAgICBjaGFubmVsSWQ6IGl0ZW0uc25pcHBldC5jaGFubmVsSWQsXHJcbiAgICAgICAgZHVyYXRpb25TZWMsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHZpZGVvIG1ldGFkYXRhOicsIGVycm9yKTtcclxuICAgIGFkZEF1ZGl0TG9nKGBGYWlsZWQgdG8gZmV0Y2ggbWV0YWRhdGEgZm9yIHZpZGVvICR7dmlkZW9JZH0uIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjbGFzc2lmeVZpZGVvcyh2aWRlb3MpIHtcclxuICAgIGNvbnN0IHsgaW5zdGFsbGF0aW9uSWQsIGxhc3RCYWNrZW5kRmFpbFRzIH0gPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbJ2luc3RhbGxhdGlvbklkJywgJ2xhc3RCYWNrZW5kRmFpbFRzJ10sIHJlc29sdmUpKTtcclxuXHJcbiAgICBpZiAobGFzdEJhY2tlbmRGYWlsVHMgJiYgKERhdGUubm93KCkgLSBsYXN0QmFja2VuZEZhaWxUcyA8IEJBQ0tPRkZfRFVSQVRJT04pKSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBCYWNrZW5kIGlzIGluIGJhY2tvZmYgcGVyaW9kLiBTa2lwcGluZyBjbGFzc2lmaWNhdGlvbiBmb3IgJHt2aWRlb3MubGVuZ3RofSB2aWRlb3MuYDtcclxuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgICAgICBhZGRBdWRpdExvZyhtZXNzYWdlKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnU2VuZGluZyB2aWRlb3MgdG8gYmFja2VuZDonLCB2aWRlb3MpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChCQUNLRU5EX1VSTCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB2aWRlb3MsIGluc3RhbGxhdGlvbklkIH0pLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFja2VuZCByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZSgnbGFzdEJhY2tlbmRGYWlsVHMnLCByZXNvbHZlKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBTdWNjZXNzZnVsbHkgY2xhc3NpZmllZCAke3ZpZGVvcy5sZW5ndGh9IHZpZGVvcy5gO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgICAgIGFkZEF1ZGl0TG9nKG1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBkYXRhLmNsYXNzaWZpY2F0aW9ucztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xhc3NpZnlpbmcgdmlkZW9zOicsIGVycm9yKTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gYEZhaWxlZCB0byBjbGFzc2lmeSB2aWRlb3MuIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YDtcclxuICAgICAgICBhZGRBdWRpdExvZyhtZXNzYWdlKTtcclxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGxhc3RCYWNrZW5kRmFpbFRzOiBEYXRlLm5vdygpIH0sIHJlc29sdmUpKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuY2hyb21lLmFsYXJtcy5vbkFsYXJtLmFkZExpc3RlbmVyKGFzeW5jIChhbGFybSkgPT4ge1xyXG4gICAgaWYgKGFsYXJtLm5hbWUgPT09ICdwcm9jZXNzLXZpZGVvLXF1ZXVlJykge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvc1RvUHJvY2VzcyA9IEFycmF5LmZyb20odmlkZW9RdWV1ZS52YWx1ZXMoKSk7XHJcbiAgICAgICAgdmlkZW9RdWV1ZS5jbGVhcigpO1xyXG5cclxuICAgICAgICBpZiAodmlkZW9zVG9Qcm9jZXNzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBhZGRBdWRpdExvZygnQWxhcm0gdHJpZ2dlcmVkLCBidXQgdmlkZW8gcXVldWUgd2FzIGVtcHR5LicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRBdWRpdExvZyhgUHJvY2Vzc2luZyBxdWV1ZSB3aXRoICR7dmlkZW9zVG9Qcm9jZXNzLmxlbmd0aH0gdmlkZW9zLmApO1xyXG4gICAgICAgIGNvbnN0IGNsYXNzaWZpY2F0aW9ucyA9IGF3YWl0IGNsYXNzaWZ5VmlkZW9zKHZpZGVvc1RvUHJvY2Vzcyk7XHJcblxyXG4gICAgICAgIGlmIChjbGFzc2lmaWNhdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgYWxsSXRlbXMgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChudWxsLCByZXNvbHZlKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlS2V5cyA9IE9iamVjdC5rZXlzKGFsbEl0ZW1zKS5maWx0ZXIoayA9PiBrLnN0YXJ0c1dpdGgoJ3ZpZGVvLWNsYXNzaWZpY2F0aW9uLScpKTtcclxuICAgICAgICAgICAgbGV0IG5ld0NhY2hlRW50cmllcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCB2aWRlb0lkIGluIGNsYXNzaWZpY2F0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NpZmljYXRpb24gPSBjbGFzc2lmaWNhdGlvbnNbdmlkZW9JZF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZUtleSA9IGB2aWRlby1jbGFzc2lmaWNhdGlvbi0ke3ZpZGVvSWR9YDtcclxuICAgICAgICAgICAgICAgIG5ld0NhY2hlRW50cmllc1tjYWNoZUtleV0gPSB7IGNsYXNzaWZpY2F0aW9uLCB0aW1lc3RhbXA6IERhdGUubm93KCkgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNhY2hlS2V5cy5sZW5ndGggKyBPYmplY3Qua2V5cyhuZXdDYWNoZUVudHJpZXMpLmxlbmd0aCA+IE1BWF9DQUNIRV9FTlRSSUVTKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgZXZpY3Rpb246IHJlbW92ZSBvbGRlc3QgZW50cmllcy4gQSBtb3JlIHNvcGhpc3RpY2F0ZWQgTFJVIHdvdWxkIGJlIGJldHRlci5cclxuICAgICAgICAgICAgICAgIGxldCBzb3J0ZWRDYWNoZSA9IGNhY2hlS2V5cy5tYXAoa2V5ID0+ICh7IGtleSwgdGltZXN0YW1wOiBhbGxJdGVtc1trZXldLnRpbWVzdGFtcCB9KSkuc29ydCgoYSwgYikgPT4gYS50aW1lc3RhbXAgLSBiLnRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBudW1Ub1JlbW92ZSA9IE1hdGgubWF4KDAsIGNhY2hlS2V5cy5sZW5ndGggKyBPYmplY3Qua2V5cyhuZXdDYWNoZUVudHJpZXMpLmxlbmd0aCAtIE1BWF9DQUNIRV9FTlRSSUVTKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleXNUb1JlbW92ZSA9IHNvcnRlZENhY2hlLnNsaWNlKDAsIG51bVRvUmVtb3ZlKS5tYXAoaXRlbSA9PiBpdGVtLmtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5c1RvUmVtb3ZlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLnJlbW92ZShrZXlzVG9SZW1vdmUsIHJlc29sdmUpKTtcclxuICAgICAgICAgICAgICAgICAgICBhZGRBdWRpdExvZyhgUHJ1bmVkICR7a2V5c1RvUmVtb3ZlLmxlbmd0aH0gb2xkIGNhY2hlIGVudHJpZXMuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KG5ld0NhY2hlRW50cmllcywgcmVzb2x2ZSkpO1xyXG4gICAgICAgICAgICBhZGRBdWRpdExvZyhgQ2FjaGVkICR7T2JqZWN0LmtleXMobmV3Q2FjaGVFbnRyaWVzKS5sZW5ndGh9IG5ldyBjbGFzc2lmaWNhdGlvbnMuYCk7XHJcblxyXG4gICAgICAgICAgICAvLyBOb3RpZnkgY29udGVudCBzY3JpcHRzIGFib3V0IHRoZSBuZXcgY2xhc3NpZmljYXRpb25zXHJcbiAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgdXJsOiBcIio6Ly93d3cueW91dHViZS5jb20vKlwiIH0sICh0YWJzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0YWJzLmZvckVhY2godGFiID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWIuaWQsIHsgdHlwZTogJ0NMQVNTSUZJQ0FUSU9OX1JFU1VMVCcsIGNsYXNzaWZpY2F0aW9ucyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ1JlY2VpdmluZyBlbmQgZG9lcyBub3QgZXhpc3QnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb250ZW50IHNjcmlwdCBpbiB0YWIgJHt0YWIuaWR9IG5vdCByZWFkeSB0byByZWNlaXZlIG1lc3NhZ2UuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHNlbmRpbmcgbWVzc2FnZSB0byB0YWIgJHt0YWIuaWR9OmAsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmxldCB2aWRlb1F1ZXVlID0gbmV3IE1hcCgpO1xyXG5jb25zdCBCQVRDSF9ERUxBWV9NSU5VVEVTID0gMDsgXHJcblxyXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XHJcbiAgICBpZiAocmVxdWVzdC50eXBlID09PSAnQ0xBU1NJRllfVklERU8nKSB7XHJcbiAgICAgICAgY29uc3QgeyB2aWRlb0lkIH0gPSByZXF1ZXN0O1xyXG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYHZpZGVvLWNsYXNzaWZpY2F0aW9uLSR7dmlkZW9JZH1gO1xyXG5cclxuICAgICAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChjYWNoZUtleSwgcmVzb2x2ZSkpO1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRJdGVtID0gcmVzdWx0W2NhY2hlS2V5XTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZEl0ZW0gJiYgKERhdGUubm93KCkgLSBjYWNoZWRJdGVtLnRpbWVzdGFtcCA8IENBQ0hFX1RUTCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgUmV0dXJuaW5nIGNhY2hlZCBjbGFzc2lmaWNhdGlvbiBmb3IgdmlkZW8gJHt2aWRlb0lkfTogJHtjYWNoZWRJdGVtLmNsYXNzaWZpY2F0aW9ufWA7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGFkZEF1ZGl0TG9nKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgY2xhc3NpZmljYXRpb246IGNhY2hlZEl0ZW0uY2xhc3NpZmljYXRpb24gfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgZmV0Y2hWaWRlb01ldGFkYXRhKHZpZGVvSWQpO1xyXG4gICAgICAgICAgICBpZiAoIW1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBtZXRhZGF0YScgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyB2YWxpZCBjYWNoZSBlbnRyeSBmb3IgdmlkZW9JZCwgYWRkaW5nIHRvIHF1ZXVlOicsIHZpZGVvSWQpO1xyXG4gICAgICAgICAgICB2aWRlb1F1ZXVlLnNldCh2aWRlb0lkLCBtZXRhZGF0YSk7XHJcbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgYWxhcm0gaXMgc2V0LiBJZiBpdCBhbHJlYWR5IGV4aXN0cywgdGhpcyBkb2VzIG5vdGhpbmcuXHJcbiAgICAgICAgICAgIGNocm9tZS5hbGFybXMuZ2V0KCdwcm9jZXNzLXZpZGVvLXF1ZXVlJywgKGFsYXJtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFsYXJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLmFsYXJtcy5jcmVhdGUoJ3Byb2Nlc3MtdmlkZW8tcXVldWUnLCB7IGRlbGF5SW5NaW51dGVzOiBCQVRDSF9ERUxBWV9NSU5VVEVTIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZEF1ZGl0TG9nKGBBbGFybSBcInByb2Nlc3MtdmlkZW8tcXVldWVcIiBjcmVhdGVkIHdpdGggYSAke0JBVENIX0RFTEFZX01JTlVURVMgKiA2MH1zIGRlbGF5LmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgcmVzcG9uZCBhc3luY2hyb25vdXNseSBsYXRlciBhZnRlciBiYXRjaCBwcm9jZXNzaW5nXHJcbiAgICAgICAgICAgIC8vIEZvciBub3csIHdlIGNhbiBzZW5kIGEgcmVzcG9uc2UgaW5kaWNhdGluZyBpdCdzIHF1ZXVlZC5cclxuICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3RhdHVzOiAncXVldWVkJyB9KTtcclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC50eXBlID09PSAnaGlkZGVuX3ZpZGVvX2NvdW50Jykge1xyXG4gICAgICAgIGNocm9tZS5hY3Rpb24uc2V0QmFkZ2VUZXh0KHsgdGV4dDogcmVxdWVzdC5jb3VudC50b1N0cmluZygpIH0pO1xyXG4gICAgfVxyXG59KTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjB4QkFBQSxJQUFBQSxHQUFBQyxHQUFBLENBQUFDLEdBQUFDLEtBQUEsRUFNRSxTQUFVQyxFQUFRQyxFQUFTLENBQ3pCLE9BQU9ILElBQVksVUFBWSxPQUFPQyxHQUFXLElBQWNBLEdBQU8sUUFBVUUsRUFBUSxFQUN4RixPQUFPLFFBQVcsWUFBYyxPQUFPLElBQU0sT0FBT0EsQ0FBTyxFQUMzREQsRUFBTyxPQUFTQyxFQUFRLENBQzVCLEdBQUVILEdBQU8sVUFBWSxDQUFFLGFBRW5CLElBQUlJLEVBRUosU0FBU0MsR0FBUSxDQUNiLE9BQU9ELEVBQWEsTUFBTSxLQUFNLFNBQVMsQ0FDN0MsQ0FJQSxTQUFTRSxFQUFnQkMsRUFBVSxDQUMvQkgsRUFBZUcsQ0FDbkIsQ0FFQSxTQUFTQyxFQUFRQyxFQUFPLENBQ3BCLE9BQ0lBLGFBQWlCLE9BQ2pCLE9BQU8sVUFBVSxTQUFTLEtBQUtBLENBQUssSUFBTSxnQkFFbEQsQ0FFQSxTQUFTQyxFQUFTRCxFQUFPLENBR3JCLE9BQ0lBLEdBQVMsTUFDVCxPQUFPLFVBQVUsU0FBUyxLQUFLQSxDQUFLLElBQU0saUJBRWxELENBRUEsU0FBU0UsRUFBV0MsRUFBR0MsRUFBRyxDQUN0QixPQUFPLE9BQU8sVUFBVSxlQUFlLEtBQUtELEVBQUdDLENBQUMsQ0FDcEQsQ0FFQSxTQUFTQyxFQUFjQyxFQUFLLENBQ3hCLEdBQUksT0FBTyxvQkFDUCxPQUFPLE9BQU8sb0JBQW9CQSxDQUFHLEVBQUUsU0FBVyxFQUVsRCxJQUFJQyxFQUNKLElBQUtBLEtBQUtELEVBQ04sR0FBSUosRUFBV0ksRUFBS0MsQ0FBQyxFQUNqQixNQUFPLEdBR2YsTUFBTyxFQUVmLENBRUEs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QUFZQyxDQUFPLEVBQ25Cd0MsRUFBYSxDQUFFLGVBQWdCQyxFQUFXLGNBQWUsQ0FBQyxFQUMxRCxNQUNKLENBRUEsSUFBTUMsRUFBVyxNQUFNcEMsR0FBbUJDLENBQU8sRUFDakQsR0FBSSxDQUFDbUMsRUFBVSxDQUNYRixFQUFhLENBQUUsTUFBTywwQkFBMkIsQ0FBQyxFQUNsRCxNQUNKLENBRUEsUUFBUSxJQUFJLHFEQUFzRGpDLENBQU8sRUFDekVjLEdBQVcsSUFBSWQsRUFBU21DLENBQVEsRUFFaEMsT0FBTyxPQUFPLElBQUksc0JBQXdCdkIsR0FBVSxDQUMzQ0EsSUFDRCxPQUFPLE9BQU8sT0FBTyxzQkFBdUIsQ0FBRSxlQUFnQmtCLEVBQW9CLENBQUMsRUFDbkZ0QyxFQUFZLDhDQUE4Q3NDLEdBQXNCLEVBQUUsVUFBVSxFQUVwRyxDQUFDLEVBSURHLEVBQWEsQ0FBRSxPQUFRLFFBQVMsQ0FBQyxDQUNyQyxHQUFHLEVBRUksRUFDWCxNQUFXRixFQUFRLE9BQVMsc0JBQ3hCLE9BQU8sT0FBTyxhQUFhLENBQUUsS0FBTUEsRUFBUSxNQUFNLFNBQVMsQ0FBRSxDQUFDLENBRXJFLENBQUMiLAogICJuYW1lcyI6IFsicmVxdWlyZV9tb21lbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJnbG9iYWwiLCAiZmFjdG9yeSIsICJob29rQ2FsbGJhY2siLCAiaG9va3MiLCAic2V0SG9va0NhbGxiYWNrIiwgImNhbGxiYWNrIiwgImlzQXJyYXkiLCAiaW5wdXQiLCAiaXNPYmplY3QiLCAiaGFzT3duUHJvcCIsICJhIiwgImIiLCAiaXNPYmplY3RFbXB0eSIsICJvYmoiLCAiayIsICJpc1VuZGVmaW5lZCIsICJpc051bWJlciIsICJpc0RhdGUiLCAibWFwIiwgImFyciIsICJmbiIsICJyZXMiLCAiaSIsICJhcnJMZW4iLCAiZXh0ZW5kIiwgImNyZWF0ZVVUQyIsICJmb3JtYXQiLCAibG9jYWxlIiwgInN0cmljdCIsICJjcmVhdGVMb2NhbE9yVVRDIiwgImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCAiZ2V0UGFyc2luZ0ZsYWdzIiwgIm0iLCAic29tZSIsICJmdW4iLCAibGVuIiwgImlzVmFsaWQiLCAiZmxhZ3MiLCAicGFyc2VkUGFydHMiLCAiaXNOb3dWYWxpZCIsICJjcmVhdGVJbnZhbGlkIiwgIm1vbWVudFByb3BlcnRpZXMiLCAidXBkYXRlSW5Qcm9ncmVzcyIsICJjb3B5Q29uZmlnIiwgInRvIiwgImZyb20iLCAicHJvcCIsICJ2YWwiLCAibW9tZW50UHJvcGVydGllc0xlbiIsICJNb21lbnQiLCAiY29uZmlnIiwgImlzTW9tZW50IiwgIndhcm4iLCAibXNnIiwgImRlcHJlY2F0ZSIsICJmaXJzdFRpbWUiLCAiYXJncyIsICJhcmciLCAia2V5IiwgImFyZ0xlbiIsICJkZXByZWNhdGlvbnMiLCAiZGVwcmVjYXRlU2ltcGxlIiwgIm5hbWUiLCAiaXNGdW5jdGlvbiIsICJzZXQiLCAibWVyZ2VDb25maWdzIiwgInBhcmVudENvbmZpZyIsICJjaGlsZENvbmZpZyIsICJMb2NhbGUiLCAia2V5cyIsICJkZWZhdWx0Q2FsZW5kYXIiLCAiY2FsZW5kYXIiLCAibW9tIiwgIm5vdyIsICJvdXRwdXQiLCAiemVyb0ZpbGwiLCAibnVtYmVyIiwgInRhcmdldExlbmd0aCIsICJmb3JjZVNpZ24iLCAiYWJzTnVtYmVyIiwgInplcm9zVG9GaWxsIiwgInNpZ24iLCAiZm9ybWF0dGluZ1Rva2VucyIsICJsb2NhbEZvcm1hdHRpbmdUb2tlbnMiLCAiZm9ybWF0RnVuY3Rpb25zIiwgImZvcm1hdFRva2VuRnVuY3Rpb25zIiwgImFkZEZvcm1hdFRva2VuIiwgInRva2VuIiwgInBhZGRlZCIsICJvcmRpbmFsIiwgImZ1bmMiLCAicmVtb3ZlRm9ybWF0dGluZ1Rva2VucyIsICJtYWtlRm9ybWF0RnVuY3Rpb24iLCAiYXJyYXkiLCAibGVuZ3RoIiwgImZvcm1hdE1vbWVudCIsICJleHBhbmRGb3JtYXQiLCAicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwgImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsICJsb25nRGF0ZUZvcm1hdCIsICJmb3JtYXRVcHBlciIsICJ0b2siLCAiZGVmYXVsdEludmFsaWREYXRlIiwgImludmFsaWREYXRlIiwgImRlZmF1bHRPcmRpbmFsIiwgImRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwgImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCAicmVsYXRpdmVUaW1lIiwgIndpdGhvdXRTdWZmaXgiLCAic3RyaW5nIiwgImlzRnV0dXJlIiwgInBhc3RGdXR1cmUiLCAiZGlmZiIsICJhbGlhc2VzIiwgIm5vcm1hbGl6ZVVuaXRzIiwgInVuaXRzIiwgIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwgImlucHV0T2JqZWN0IiwgIm5vcm1hbGl6ZWRJbnB1dCIsICJub3JtYWxpemVkUHJvcCIsICJwcmlvcml0aWVzIiwgImdldFByaW9yaXRpemVkVW5pdHMiLCAidW5pdHNPYmoiLCAidSIsICJtYXRjaDEiLCAibWF0Y2gyIiwgIm1hdGNoMyIsICJtYXRjaDQiLCAibWF0Y2g2IiwgIm1hdGNoMXRvMiIsICJtYXRjaDN0bzQiLCAibWF0Y2g1dG82IiwgIm1hdGNoMXRvMyIsICJtYXRjaDF0bzQiLCAibWF0Y2gxdG82IiwgIm1hdGNoVW5zaWduZWQiLCAibWF0Y2hTaWduZWQiLCAibWF0Y2hPZmZzZXQiLCAibWF0Y2hTaG9ydE9mZnNldCIsICJtYXRjaFRpbWVzdGFtcCIsICJtYXRjaFdvcmQiLCAibWF0Y2gxdG8yTm9MZWFkaW5nWmVybyIsICJtYXRjaDF0bzJIYXNaZXJvIiwgInJlZ2V4ZXMiLCAiYWRkUmVnZXhUb2tlbiIsICJyZWdleCIsICJzdHJpY3RSZWdleCIsICJpc1N0cmljdCIsICJsb2NhbGVEYXRhIiwgImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsICJ1bmVzY2FwZUZvcm1hdCIsICJzIiwgInJlZ2V4RXNjYXBlIiwgIm1hdGNoZWQiLCAicDEiLCAicDIiLCAicDMiLCAicDQiLCAiYWJzRmxvb3IiLCAidG9JbnQiLCAiYXJndW1lbnRGb3JDb2VyY2lvbiIsICJjb2VyY2VkTnVtYmVyIiwgInZhbHVlIiwgInRva2VucyIsICJhZGRQYXJzZVRva2VuIiwgInRva2VuTGVuIiwgImFkZFdlZWtQYXJzZVRva2VuIiwgImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwgImlzTGVhcFllYXIiLCAieWVhciIsICJZRUFSIiwgIk1PTlRIIiwgIkRBVEUiLCAiSE9VUiIsICJNSU5VVEUiLCAiU0VDT05EIiwgIk1JTExJU0VDT05EIiwgIldFRUsiLCAiV0VFS0RBWSIsICJ5IiwgImRheXNJblllYXIiLCAiZ2V0U2V0WWVhciIsICJtYWtlR2V0U2V0IiwgImdldElzTGVhcFllYXIiLCAidW5pdCIsICJrZWVwVGltZSIsICJzZXQkMSIsICJnZXQiLCAiZCIsICJpc1VUQyIsICJtb250aCIsICJkYXRlIiwgInN0cmluZ0dldCIsICJzdHJpbmdTZXQiLCAicHJpb3JpdGl6ZWQiLCAicHJpb3JpdGl6ZWRMZW4iLCAibW9kIiwgIm4iLCAieCIsICJpbmRleE9mIiwgIm8iLCAiZGF5c0luTW9udGgiLCAibW9kTW9udGgiLCAiZGVmYXVsdExvY2FsZU1vbnRocyIsICJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCAiTU9OVEhTX0lOX0ZPUk1BVCIsICJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsICJkZWZhdWx0TW9udGhzUmVnZXgiLCAibG9jYWxlTW9udGhzIiwgImxvY2FsZU1vbnRoc1Nob3J0IiwgImhhbmRsZVN0cmljdFBhcnNlIiwgIm1vbnRoTmFtZSIsICJpaSIsICJsbGMiLCAibG9jYWxlTW9udGhzUGFyc2UiLCAic2V0TW9udGgiLCAiZ2V0U2V0TW9udGgiLCAiZ2V0RGF5c0luTW9udGgiLCAibW9udGhzU2hvcnRSZWdleCIsICJjb21wdXRlTW9udGhzUGFyc2UiLCAibW9udGhzUmVnZXgiLCAiY21wTGVuUmV2IiwgInNob3J0UGllY2VzIiwgImxvbmdQaWVjZXMiLCAibWl4ZWRQaWVjZXMiLCAic2hvcnRQIiwgImxvbmdQIiwgImNyZWF0ZURhdGUiLCAiaCIsICJNIiwgIm1zIiwgImNyZWF0ZVVUQ0RhdGUiLCAiZmlyc3RXZWVrT2Zmc2V0IiwgImRvdyIsICJkb3kiLCAiZndkIiwgImZ3ZGx3IiwgImRheU9mWWVhckZyb21XZWVrcyIsICJ3ZWVrIiwgIndlZWtkYXkiLCAibG9jYWxXZWVrZGF5IiwgIndlZWtPZmZzZXQiLCAiZGF5T2ZZZWFyIiwgInJlc1llYXIiLCAicmVzRGF5T2ZZZWFyIiwgIndlZWtPZlllYXIiLCAicmVzV2VlayIsICJ3ZWVrc0luWWVhciIsICJ3ZWVrT2Zmc2V0TmV4dCIsICJsb2NhbGVXZWVrIiwgImRlZmF1bHRMb2NhbGVXZWVrIiwgImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwgImxvY2FsZUZpcnN0RGF5T2ZZZWFyIiwgImdldFNldFdlZWsiLCAiZ2V0U2V0SVNPV2VlayIsICJwYXJzZVdlZWtkYXkiLCAicGFyc2VJc29XZWVrZGF5IiwgInNoaWZ0V2Vla2RheXMiLCAid3MiLCAiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwgImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwgImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsICJkZWZhdWx0V2Vla2RheXNSZWdleCIsICJkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4IiwgImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwgImxvY2FsZVdlZWtkYXlzIiwgIndlZWtkYXlzIiwgImxvY2FsZVdlZWtkYXlzU2hvcnQiLCAibG9jYWxlV2Vla2RheXNNaW4iLCAiaGFuZGxlU3RyaWN0UGFyc2UkMSIsICJ3ZWVrZGF5TmFtZSIsICJsb2NhbGVXZWVrZGF5c1BhcnNlIiwgImdldFNldERheU9mV2VlayIsICJkYXkiLCAiZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIiwgImdldFNldElTT0RheU9mV2VlayIsICJ3ZWVrZGF5c1JlZ2V4IiwgImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwgIndlZWtkYXlzU2hvcnRSZWdleCIsICJ3ZWVrZGF5c01pblJlZ2V4IiwgIm1pblBpZWNlcyIsICJtaW5wIiwgInNob3J0cCIsICJsb25ncCIsICJoRm9ybWF0IiwgImtGb3JtYXQiLCAibWVyaWRpZW0iLCAibG93ZXJjYXNlIiwgIm1hdGNoTWVyaWRpZW0iLCAia0lucHV0IiwgInBvcyIsICJwb3MxIiwgInBvczIiLCAibG9jYWxlSXNQTSIsICJkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSIsICJnZXRTZXRIb3VyIiwgImxvY2FsZU1lcmlkaWVtIiwgImhvdXJzIiwgIm1pbnV0ZXMiLCAiaXNMb3dlciIsICJiYXNlQ29uZmlnIiwgImxvY2FsZXMiLCAibG9jYWxlRmFtaWxpZXMiLCAiZ2xvYmFsTG9jYWxlIiwgImNvbW1vblByZWZpeCIsICJhcnIxIiwgImFycjIiLCAibWlubCIsICJub3JtYWxpemVMb2NhbGUiLCAiY2hvb3NlTG9jYWxlIiwgIm5hbWVzIiwgImoiLCAibmV4dCIsICJzcGxpdCIsICJsb2FkTG9jYWxlIiwgImlzTG9jYWxlTmFtZVNhbmUiLCAib2xkTG9jYWxlIiwgImFsaWFzZWRSZXF1aXJlIiwgIl9fcmVxdWlyZSIsICJnZXRTZXRHbG9iYWxMb2NhbGUiLCAidmFsdWVzIiwgImRhdGEiLCAiZ2V0TG9jYWxlIiwgImRlZmluZUxvY2FsZSIsICJ1cGRhdGVMb2NhbGUiLCAidG1wTG9jYWxlIiwgImxpc3RMb2NhbGVzIiwgImNoZWNrT3ZlcmZsb3ciLCAib3ZlcmZsb3ciLCAiZXh0ZW5kZWRJc29SZWdleCIsICJiYXNpY0lzb1JlZ2V4IiwgInR6UmVnZXgiLCAiaXNvRGF0ZXMiLCAiaXNvVGltZXMiLCAiYXNwTmV0SnNvblJlZ2V4IiwgInJmYzI4MjIiLCAib2JzT2Zmc2V0cyIsICJjb25maWdGcm9tSVNPIiwgImwiLCAibWF0Y2giLCAiYWxsb3dUaW1lIiwgImRhdGVGb3JtYXQiLCAidGltZUZvcm1hdCIsICJ0ekZvcm1hdCIsICJpc29EYXRlc0xlbiIsICJpc29UaW1lc0xlbiIsICJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwgImV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MiLCAieWVhclN0ciIsICJtb250aFN0ciIsICJkYXlTdHIiLCAiaG91clN0ciIsICJtaW51dGVTdHIiLCAic2Vjb25kU3RyIiwgInJlc3VsdCIsICJ1bnRydW5jYXRlWWVhciIsICJwcmVwcm9jZXNzUkZDMjgyMiIsICJjaGVja1dlZWtkYXkiLCAid2Vla2RheVN0ciIsICJwYXJzZWRJbnB1dCIsICJ3ZWVrZGF5UHJvdmlkZWQiLCAid2Vla2RheUFjdHVhbCIsICJjYWxjdWxhdGVPZmZzZXQiLCAib2JzT2Zmc2V0IiwgIm1pbGl0YXJ5T2Zmc2V0IiwgIm51bU9mZnNldCIsICJobSIsICJjb25maWdGcm9tUkZDMjgyMiIsICJwYXJzZWRBcnJheSIsICJjb25maWdGcm9tU3RyaW5nIiwgImRlZmF1bHRzIiwgImMiLCAiY3VycmVudERhdGVBcnJheSIsICJub3dWYWx1ZSIsICJjb25maWdGcm9tQXJyYXkiLCAiY3VycmVudERhdGUiLCAiZXhwZWN0ZWRXZWVrZGF5IiwgInllYXJUb1VzZSIsICJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCAidyIsICJ3ZWVrWWVhciIsICJ0ZW1wIiwgIndlZWtkYXlPdmVyZmxvdyIsICJjdXJXZWVrIiwgImNyZWF0ZUxvY2FsIiwgInNraXBwZWQiLCAic3RyaW5nTGVuZ3RoIiwgInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCAiZXJhIiwgIm1lcmlkaWVtRml4V3JhcCIsICJob3VyIiwgImlzUG0iLCAiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwgInRlbXBDb25maWciLCAiYmVzdE1vbWVudCIsICJzY29yZVRvQmVhdCIsICJjdXJyZW50U2NvcmUiLCAidmFsaWRGb3JtYXRGb3VuZCIsICJiZXN0Rm9ybWF0SXNWYWxpZCIsICJjb25maWdmTGVuIiwgImNvbmZpZ0Zyb21PYmplY3QiLCAiZGF5T3JEYXRlIiwgImNyZWF0ZUZyb21Db25maWciLCAicHJlcGFyZUNvbmZpZyIsICJjb25maWdGcm9tSW5wdXQiLCAicHJvdG90eXBlTWluIiwgIm90aGVyIiwgInByb3RvdHlwZU1heCIsICJwaWNrQnkiLCAibW9tZW50cyIsICJtaW4iLCAibWF4IiwgIm9yZGVyaW5nIiwgImlzRHVyYXRpb25WYWxpZCIsICJ1bml0SGFzRGVjaW1hbCIsICJvcmRlckxlbiIsICJpc1ZhbGlkJDEiLCAiY3JlYXRlSW52YWxpZCQxIiwgImNyZWF0ZUR1cmF0aW9uIiwgIkR1cmF0aW9uIiwgImR1cmF0aW9uIiwgInllYXJzIiwgInF1YXJ0ZXJzIiwgIm1vbnRocyIsICJ3ZWVrcyIsICJkYXlzIiwgInNlY29uZHMiLCAibWlsbGlzZWNvbmRzIiwgImlzRHVyYXRpb24iLCAiYWJzUm91bmQiLCAiY29tcGFyZUFycmF5cyIsICJhcnJheTEiLCAiYXJyYXkyIiwgImRvbnRDb252ZXJ0IiwgImxlbmd0aERpZmYiLCAiZGlmZnMiLCAib2Zmc2V0IiwgInNlcGFyYXRvciIsICJvZmZzZXRGcm9tU3RyaW5nIiwgImNodW5rT2Zmc2V0IiwgIm1hdGNoZXIiLCAibWF0Y2hlcyIsICJjaHVuayIsICJwYXJ0cyIsICJjbG9uZVdpdGhPZmZzZXQiLCAibW9kZWwiLCAiZ2V0RGF0ZU9mZnNldCIsICJnZXRTZXRPZmZzZXQiLCAia2VlcExvY2FsVGltZSIsICJrZWVwTWludXRlcyIsICJsb2NhbEFkanVzdCIsICJhZGRTdWJ0cmFjdCIsICJnZXRTZXRab25lIiwgInNldE9mZnNldFRvVVRDIiwgInNldE9mZnNldFRvTG9jYWwiLCAic2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQiLCAidFpvbmUiLCAiaGFzQWxpZ25lZEhvdXJPZmZzZXQiLCAiaXNEYXlsaWdodFNhdmluZ1RpbWUiLCAiaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkIiwgImlzTG9jYWwiLCAiaXNVdGNPZmZzZXQiLCAiaXNVdGMiLCAiYXNwTmV0UmVnZXgiLCAiaXNvUmVnZXgiLCAicmV0IiwgImRpZmZSZXMiLCAicGFyc2VJc28iLCAibW9tZW50c0RpZmZlcmVuY2UiLCAiaW5wIiwgInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCAiYmFzZSIsICJjcmVhdGVBZGRlciIsICJkaXJlY3Rpb24iLCAicGVyaW9kIiwgImR1ciIsICJ0bXAiLCAiaXNBZGRpbmciLCAidXBkYXRlT2Zmc2V0IiwgImFkZCIsICJzdWJ0cmFjdCIsICJpc1N0cmluZyIsICJpc01vbWVudElucHV0IiwgImlzTnVtYmVyT3JTdHJpbmdBcnJheSIsICJpc01vbWVudElucHV0T2JqZWN0IiwgIm9iamVjdFRlc3QiLCAicHJvcGVydHlUZXN0IiwgInByb3BlcnRpZXMiLCAicHJvcGVydHkiLCAicHJvcGVydHlMZW4iLCAiYXJyYXlUZXN0IiwgImRhdGFUeXBlVGVzdCIsICJpdGVtIiwgImlzQ2FsZW5kYXJTcGVjIiwgImdldENhbGVuZGFyRm9ybWF0IiwgIm15TW9tZW50IiwgImNhbGVuZGFyJDEiLCAidGltZSIsICJmb3JtYXRzIiwgInNvZCIsICJjbG9uZSIsICJpc0FmdGVyIiwgImxvY2FsSW5wdXQiLCAiaXNCZWZvcmUiLCAiaXNCZXR3ZWVuIiwgImluY2x1c2l2aXR5IiwgImxvY2FsRnJvbSIsICJsb2NhbFRvIiwgImlzU2FtZSIsICJpbnB1dE1zIiwgImlzU2FtZU9yQWZ0ZXIiLCAiaXNTYW1lT3JCZWZvcmUiLCAiYXNGbG9hdCIsICJ0aGF0IiwgInpvbmVEZWx0YSIsICJtb250aERpZmYiLCAid2hvbGVNb250aERpZmYiLCAiYW5jaG9yIiwgImFuY2hvcjIiLCAiYWRqdXN0IiwgInRvU3RyaW5nIiwgInRvSVNPU3RyaW5nIiwgImtlZXBPZmZzZXQiLCAidXRjIiwgImluc3BlY3QiLCAiem9uZSIsICJwcmVmaXgiLCAiZGF0ZXRpbWUiLCAic3VmZml4IiwgImlucHV0U3RyaW5nIiwgImZyb21Ob3ciLCAidG9Ob3ciLCAibmV3TG9jYWxlRGF0YSIsICJsYW5nIiwgIk1TX1BFUl9TRUNPTkQiLCAiTVNfUEVSX01JTlVURSIsICJNU19QRVJfSE9VUiIsICJNU19QRVJfNDAwX1lFQVJTIiwgIm1vZCQxIiwgImRpdmlkZW5kIiwgImRpdmlzb3IiLCAibG9jYWxTdGFydE9mRGF0ZSIsICJ1dGNTdGFydE9mRGF0ZSIsICJzdGFydE9mIiwgInN0YXJ0T2ZEYXRlIiwgImVuZE9mIiwgInZhbHVlT2YiLCAidW5peCIsICJ0b0RhdGUiLCAidG9BcnJheSIsICJ0b09iamVjdCIsICJ0b0pTT04iLCAiaXNWYWxpZCQyIiwgInBhcnNpbmdGbGFncyIsICJpbnZhbGlkQXQiLCAiY3JlYXRpb25EYXRhIiwgIm1hdGNoRXJhQWJiciIsICJtYXRjaEVyYU5hbWUiLCAibWF0Y2hFcmFOYXJyb3ciLCAibWF0Y2hFcmFZZWFyT3JkaW5hbCIsICJsb2NhbGVFcmFzIiwgImVyYXMiLCAibG9jYWxlRXJhc1BhcnNlIiwgImVyYU5hbWUiLCAiYWJiciIsICJuYXJyb3ciLCAibG9jYWxlRXJhc0NvbnZlcnRZZWFyIiwgImRpciIsICJnZXRFcmFOYW1lIiwgImdldEVyYU5hcnJvdyIsICJnZXRFcmFBYmJyIiwgImdldEVyYVllYXIiLCAiZXJhc05hbWVSZWdleCIsICJjb21wdXRlRXJhc1BhcnNlIiwgImVyYXNBYmJyUmVnZXgiLCAiZXJhc05hcnJvd1JlZ2V4IiwgImFiYnJQaWVjZXMiLCAibmFtZVBpZWNlcyIsICJuYXJyb3dQaWVjZXMiLCAiZXJhc05hbWUiLCAiZXJhc0FiYnIiLCAiZXJhc05hcnJvdyIsICJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwgImdldHRlciIsICJnZXRTZXRXZWVrWWVhciIsICJnZXRTZXRXZWVrWWVhckhlbHBlciIsICJnZXRTZXRJU09XZWVrWWVhciIsICJnZXRJU09XZWVrc0luWWVhciIsICJnZXRJU09XZWVrc0luSVNPV2Vla1llYXIiLCAiZ2V0V2Vla3NJblllYXIiLCAid2Vla0luZm8iLCAiZ2V0V2Vla3NJbldlZWtZZWFyIiwgIndlZWtzVGFyZ2V0IiwgInNldFdlZWtBbGwiLCAiZGF5T2ZZZWFyRGF0YSIsICJnZXRTZXRRdWFydGVyIiwgImdldFNldERheU9mTW9udGgiLCAiZ2V0U2V0RGF5T2ZZZWFyIiwgImdldFNldE1pbnV0ZSIsICJnZXRTZXRTZWNvbmQiLCAiZ2V0U2V0TWlsbGlzZWNvbmQiLCAicGFyc2VNcyIsICJnZXRab25lQWJiciIsICJnZXRab25lTmFtZSIsICJwcm90byIsICJjcmVhdGVVbml4IiwgImNyZWF0ZUluWm9uZSIsICJwcmVQYXJzZVBvc3RGb3JtYXQiLCAicHJvdG8kMSIsICJnZXQkMSIsICJpbmRleCIsICJmaWVsZCIsICJzZXR0ZXIiLCAibGlzdE1vbnRoc0ltcGwiLCAib3V0IiwgImxpc3RXZWVrZGF5c0ltcGwiLCAibG9jYWxlU29ydGVkIiwgInNoaWZ0IiwgImxpc3RNb250aHMiLCAibGlzdE1vbnRoc1Nob3J0IiwgImxpc3RXZWVrZGF5cyIsICJsaXN0V2Vla2RheXNTaG9ydCIsICJsaXN0V2Vla2RheXNNaW4iLCAibWF0aEFicyIsICJhYnMiLCAiYWRkU3VidHJhY3QkMSIsICJhZGQkMSIsICJzdWJ0cmFjdCQxIiwgImFic0NlaWwiLCAiYnViYmxlIiwgIm1vbnRoc0Zyb21EYXlzIiwgIm1vbnRoc1RvRGF5cyIsICJkYXlzVG9Nb250aHMiLCAiYXMiLCAibWFrZUFzIiwgImFsaWFzIiwgImFzTWlsbGlzZWNvbmRzIiwgImFzU2Vjb25kcyIsICJhc01pbnV0ZXMiLCAiYXNIb3VycyIsICJhc0RheXMiLCAiYXNXZWVrcyIsICJhc01vbnRocyIsICJhc1F1YXJ0ZXJzIiwgImFzWWVhcnMiLCAidmFsdWVPZiQxIiwgImNsb25lJDEiLCAiZ2V0JDIiLCAibWFrZUdldHRlciIsICJyb3VuZCIsICJ0aHJlc2hvbGRzIiwgInN1YnN0aXR1dGVUaW1lQWdvIiwgInJlbGF0aXZlVGltZSQxIiwgInBvc05lZ0R1cmF0aW9uIiwgImdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIiwgInJvdW5kaW5nRnVuY3Rpb24iLCAiZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkIiwgInRocmVzaG9sZCIsICJsaW1pdCIsICJodW1hbml6ZSIsICJhcmdXaXRoU3VmZml4IiwgImFyZ1RocmVzaG9sZHMiLCAid2l0aFN1ZmZpeCIsICJ0aCIsICJhYnMkMSIsICJ0b0lTT1N0cmluZyQxIiwgInRvdGFsIiwgInRvdGFsU2lnbiIsICJ5bVNpZ24iLCAiZGF5c1NpZ24iLCAiaG1zU2lnbiIsICJwcm90byQyIiwgImltcG9ydF9tb21lbnQiLCAiQ0FDSEVfVFRMIiwgIk1BWF9DQUNIRV9FTlRSSUVTIiwgIkJBQ0tFTkRfVVJMIiwgIkJBQ0tPRkZfRFVSQVRJT04iLCAiQVVESVRfTE9HX01BWF9FTlRSSUVTIiwgIllPVVRVQkVfQVBJX0tFWSIsICJhZGRBdWRpdExvZyIsICJtZXNzYWdlIiwgImF1ZGl0TG9nIiwgInJlc29sdmUiLCAidGltZXN0YW1wIiwgInJlc3VsdCIsICJpbnN0YWxsYXRpb25JZCIsICJmZXRjaFZpZGVvTWV0YWRhdGEiLCAidmlkZW9JZCIsICJ1cmwiLCAicmVzcG9uc2UiLCAiZGF0YSIsICJpdGVtIiwgImR1cmF0aW9uIiwgImR1cmF0aW9uU2VjIiwgIm1vbWVudCIsICJlcnJvciIsICJjbGFzc2lmeVZpZGVvcyIsICJ2aWRlb3MiLCAibGFzdEJhY2tlbmRGYWlsVHMiLCAiYWxhcm0iLCAidmlkZW9zVG9Qcm9jZXNzIiwgInZpZGVvUXVldWUiLCAiY2xhc3NpZmljYXRpb25zIiwgImFsbEl0ZW1zIiwgImNhY2hlS2V5cyIsICJrIiwgIm5ld0NhY2hlRW50cmllcyIsICJjbGFzc2lmaWNhdGlvbiIsICJjYWNoZUtleSIsICJzb3J0ZWRDYWNoZSIsICJrZXkiLCAiYSIsICJiIiwgIm51bVRvUmVtb3ZlIiwgImtleXNUb1JlbW92ZSIsICJ0YWJzIiwgInRhYiIsICJCQVRDSF9ERUxBWV9NSU5VVEVTIiwgInJlcXVlc3QiLCAic2VuZGVyIiwgInNlbmRSZXNwb25zZSIsICJjYWNoZWRJdGVtIiwgIm1ldGFkYXRhIl0KfQo=
